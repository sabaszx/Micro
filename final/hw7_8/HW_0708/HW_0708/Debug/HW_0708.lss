
HW_0708.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000208  0000027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000208  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a17  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074e  00000000  00000000  00000d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a5  00000000  00000000  000014a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001850  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000422  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000354  00000000  00000000  00001ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000203a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e0       	ldi	r30, 0x08	; 8
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  8e:	0c 94 02 01 	jmp	0x204	; 0x204 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <rander_value>:
		0x39,
		0x5E,
		0x79,
		0x71
	};
	return lookuptable[input];
  96:	9d ec       	ldi	r25, 0xCD	; 205
  98:	89 9f       	mul	r24, r25
  9a:	e1 2d       	mov	r30, r1
  9c:	11 24       	eor	r1, r1
  9e:	e6 95       	lsr	r30
  a0:	e6 95       	lsr	r30
  a2:	e6 95       	lsr	r30
  a4:	3e 2f       	mov	r19, r30
  a6:	33 0f       	add	r19, r19
  a8:	23 2f       	mov	r18, r19
  aa:	22 0f       	add	r18, r18
  ac:	22 0f       	add	r18, r18
  ae:	23 0f       	add	r18, r19
  b0:	a8 2f       	mov	r26, r24
  b2:	a2 1b       	sub	r26, r18
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	a0 50       	subi	r26, 0x00	; 0
  b8:	bf 4f       	sbci	r27, 0xFF	; 255
  ba:	2c 91       	ld	r18, X

	// last decimal 
	temp = number % 10;
	temp_bjt = port_d_output[0];
	out_led = bin_to_7seg(temp);
	PORTC = out_led;
  bc:	28 b9       	out	0x08, r18	; 8
	PORTD = temp_bjt;
  be:	21 e1       	ldi	r18, 0x11	; 17
  c0:	2b b9       	out	0x0b, r18	; 11
		0x39,
		0x5E,
		0x79,
		0x71
	};
	return lookuptable[input];
  c2:	e9 9f       	mul	r30, r25
  c4:	91 2d       	mov	r25, r1
  c6:	11 24       	eor	r1, r1
  c8:	96 95       	lsr	r25
  ca:	96 95       	lsr	r25
  cc:	96 95       	lsr	r25
  ce:	99 0f       	add	r25, r25
  d0:	29 2f       	mov	r18, r25
  d2:	22 0f       	add	r18, r18
  d4:	22 0f       	add	r18, r18
  d6:	92 0f       	add	r25, r18
  d8:	e9 1b       	sub	r30, r25
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	e0 50       	subi	r30, 0x00	; 0
  de:	ff 4f       	sbci	r31, 0xFF	; 255
  e0:	90 81       	ld	r25, Z
	
	// ten decimal
	temp = number / 10 % 10;
	temp_bjt = port_d_output[1];
	out_led = bin_to_7seg(temp);
	PORTC = out_led;
  e2:	98 b9       	out	0x08, r25	; 8
	PORTD = temp_bjt;
  e4:	91 e2       	ldi	r25, 0x21	; 33
  e6:	9b b9       	out	0x0b, r25	; 11
		0x39,
		0x5E,
		0x79,
		0x71
	};
	return lookuptable[input];
  e8:	e9 e2       	ldi	r30, 0x29	; 41
  ea:	8e 9f       	mul	r24, r30
  ec:	e1 2d       	mov	r30, r1
  ee:	11 24       	eor	r1, r1
  f0:	e2 95       	swap	r30
  f2:	ef 70       	andi	r30, 0x0F	; 15
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	e0 50       	subi	r30, 0x00	; 0
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	90 81       	ld	r25, Z
	
	// Hundred Decimal
	temp = number/100 % 10;
	temp_bjt = port_d_output[2];
	out_led = bin_to_7seg(temp);
	PORTC = out_led;
  fc:	98 b9       	out	0x08, r25	; 8
	PORTD = temp_bjt;
  fe:	91 e4       	ldi	r25, 0x41	; 65
 100:	9b b9       	out	0x0b, r25	; 11
		0x39,
		0x5E,
		0x79,
		0x71
	};
	return lookuptable[input];
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	68 ee       	ldi	r22, 0xE8	; 232
 106:	73 e0       	ldi	r23, 0x03	; 3
 108:	0e 94 da 00 	call	0x1b4	; 0x1b4 <__divmodhi4>
 10c:	cb 01       	movw	r24, r22
 10e:	6a e0       	ldi	r22, 0x0A	; 10
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	0e 94 da 00 	call	0x1b4	; 0x1b4 <__divmodhi4>
 116:	fc 01       	movw	r30, r24
 118:	ff 27       	eor	r31, r31
 11a:	e0 50       	subi	r30, 0x00	; 0
 11c:	ff 4f       	sbci	r31, 0xFF	; 255
 11e:	80 81       	ld	r24, Z
	
	//Thousand Decimal
	temp = number/1000 % 10;
	temp_bjt = port_d_output[3];
	out_led = bin_to_7seg(temp);
	PORTC = out_led;
 120:	88 b9       	out	0x08, r24	; 8
	PORTD = temp_bjt;
 122:	81 e8       	ldi	r24, 0x81	; 129
 124:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	83 ed       	ldi	r24, 0xD3	; 211
 12a:	90 e3       	ldi	r25, 0x30	; 48
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <rander_value+0x96>
 134:	00 c0       	rjmp	.+0      	; 0x136 <rander_value+0xa0>
 136:	00 00       	nop
 138:	08 95       	ret

0000013a <check_for_toggle>:
char check_for_toggle(unsigned char mode_updown){
	unsigned char switch_input;
	switch_input = PIND;
	switch_input = switch_input & 0b00000010;
	switch_input = switch_input >> 1;
	if (switch_input == 0)
 13a:	49 99       	sbic	0x09, 1	; 9
 13c:	0e c0       	rjmp	.+28     	; 0x15a <check_for_toggle+0x20>
 13e:	ef e3       	ldi	r30, 0x3F	; 63
 140:	fc e9       	ldi	r31, 0x9C	; 156
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <check_for_toggle+0x8>
 146:	00 c0       	rjmp	.+0      	; 0x148 <check_for_toggle+0xe>
 148:	00 00       	nop
		//bounce delay
		_delay_ms(10);
		switch_input = PIND;
		switch_input &= 0b00000010;
		switch_input = switch_input >> 1;
		if(switch_input == 0){
 14a:	49 99       	sbic	0x09, 1	; 9
 14c:	06 c0       	rjmp	.+12     	; 0x15a <check_for_toggle+0x20>
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	09 f4       	brne	.+2      	; 0x156 <check_for_toggle+0x1c>
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	89 2f       	mov	r24, r25
 158:	08 95       	ret
			{
				return 1;
			}
		}
	}
}
 15a:	08 95       	ret

0000015c <check_for_reset>:
uint8_t check_for_reset(uint8_t data_value){
	unsigned char check_button;
	check_button = PIND;
	check_button &= 0b00000100;
	check_button = check_button << 1;
	if(check_button == 0){
 15c:	4a 99       	sbic	0x09, 2	; 9
 15e:	03 c0       	rjmp	.+6      	; 0x166 <check_for_reset+0xa>
		check_button = PIND;
		check_button &= 0b00000100;
		check_button = check_button << 1;
		if(check_button == 0){
 160:	4a 9b       	sbis	0x09, 2	; 9
 162:	02 c0       	rjmp	.+4      	; 0x168 <check_for_reset+0xc>
 164:	08 95       	ret
		}
		else{
			return data_value;
		}
	}
}
 166:	08 95       	ret
	if(check_button == 0){
		check_button = PIND;
		check_button &= 0b00000100;
		check_button = check_button << 1;
		if(check_button == 0){
			return 0;
 168:	80 e0       	ldi	r24, 0x00	; 0
		}
		else{
			return data_value;
		}
	}
}
 16a:	08 95       	ret

0000016c <run_number>:

uint8_t run_number(uint8_t number,unsigned char mode_updown){
	// Mode Up
	if(mode_updown == 0){
 16c:	61 11       	cpse	r22, r1
 16e:	02 c0       	rjmp	.+4      	; 0x174 <run_number+0x8>
		if(number < 10000){
			number ++;
 170:	8f 5f       	subi	r24, 0xFF	; 255
			return number;
 172:	08 95       	ret
		}
		else{
			return 0;
		}
	}
	else if(mode_updown ==1){
 174:	61 30       	cpi	r22, 0x01	; 1
 176:	21 f4       	brne	.+8      	; 0x180 <run_number+0x14>
		if(number > 0){
 178:	88 23       	and	r24, r24
 17a:	19 f0       	breq	.+6      	; 0x182 <run_number+0x16>
			number --;
 17c:	81 50       	subi	r24, 0x01	; 1
			return number;
 17e:	08 95       	ret
		}
		else{
			return 10000;
		}
	}
}
 180:	08 95       	ret
		if(number > 0){
			number --;
			return number;
		}
		else{
			return 10000;
 182:	80 e1       	ldi	r24, 0x10	; 16
		}
	}
}
 184:	08 95       	ret

00000186 <main>:
{
	/* Replace with your application code */
	// 0 is input 1 is output
	
	//PORTC AS all Output
	DDRC = 0xFF;
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	87 b9       	out	0x07, r24	; 7
	
	//PORTD 0,4,5,6,7 is Output 1,2 as Input
	DDRD = 0b11110001;
 18a:	81 ef       	ldi	r24, 0xF1	; 241
 18c:	8a b9       	out	0x0a, r24	; 10
	uint8_t out_value = 1;
	unsigned char mode_updown;
	mode_updown = 0;
 18e:	d0 e0       	ldi	r29, 0x00	; 0
	//PORTC AS all Output
	DDRC = 0xFF;
	
	//PORTD 0,4,5,6,7 is Output 1,2 as Input
	DDRD = 0b11110001;
	uint8_t out_value = 1;
 190:	c1 e0       	ldi	r28, 0x01	; 1
	unsigned char mode_updown;
	mode_updown = 0;
	while (1)
	{
		rander_value(out_value);
 192:	8c 2f       	mov	r24, r28
 194:	0e 94 4b 00 	call	0x96	; 0x96 <rander_value>
		out_value  = run_number(out_value,mode_updown);
 198:	6d 2f       	mov	r22, r29
 19a:	8c 2f       	mov	r24, r28
 19c:	0e 94 b6 00 	call	0x16c	; 0x16c <run_number>
 1a0:	c8 2f       	mov	r28, r24
		mode_updown = check_for_toggle(mode_updown);
 1a2:	8d 2f       	mov	r24, r29
 1a4:	0e 94 9d 00 	call	0x13a	; 0x13a <check_for_toggle>
 1a8:	d8 2f       	mov	r29, r24
		out_value = check_for_reset(out_value);
 1aa:	8c 2f       	mov	r24, r28
 1ac:	0e 94 ae 00 	call	0x15c	; 0x15c <check_for_reset>
 1b0:	c8 2f       	mov	r28, r24
 1b2:	ef cf       	rjmp	.-34     	; 0x192 <main+0xc>

000001b4 <__divmodhi4>:
 1b4:	97 fb       	bst	r25, 7
 1b6:	07 2e       	mov	r0, r23
 1b8:	16 f4       	brtc	.+4      	; 0x1be <__divmodhi4+0xa>
 1ba:	00 94       	com	r0
 1bc:	07 d0       	rcall	.+14     	; 0x1cc <__divmodhi4_neg1>
 1be:	77 fd       	sbrc	r23, 7
 1c0:	09 d0       	rcall	.+18     	; 0x1d4 <__divmodhi4_neg2>
 1c2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <__udivmodhi4>
 1c6:	07 fc       	sbrc	r0, 7
 1c8:	05 d0       	rcall	.+10     	; 0x1d4 <__divmodhi4_neg2>
 1ca:	3e f4       	brtc	.+14     	; 0x1da <__divmodhi4_exit>

000001cc <__divmodhi4_neg1>:
 1cc:	90 95       	com	r25
 1ce:	81 95       	neg	r24
 1d0:	9f 4f       	sbci	r25, 0xFF	; 255
 1d2:	08 95       	ret

000001d4 <__divmodhi4_neg2>:
 1d4:	70 95       	com	r23
 1d6:	61 95       	neg	r22
 1d8:	7f 4f       	sbci	r23, 0xFF	; 255

000001da <__divmodhi4_exit>:
 1da:	08 95       	ret

000001dc <__udivmodhi4>:
 1dc:	aa 1b       	sub	r26, r26
 1de:	bb 1b       	sub	r27, r27
 1e0:	51 e1       	ldi	r21, 0x11	; 17
 1e2:	07 c0       	rjmp	.+14     	; 0x1f2 <__udivmodhi4_ep>

000001e4 <__udivmodhi4_loop>:
 1e4:	aa 1f       	adc	r26, r26
 1e6:	bb 1f       	adc	r27, r27
 1e8:	a6 17       	cp	r26, r22
 1ea:	b7 07       	cpc	r27, r23
 1ec:	10 f0       	brcs	.+4      	; 0x1f2 <__udivmodhi4_ep>
 1ee:	a6 1b       	sub	r26, r22
 1f0:	b7 0b       	sbc	r27, r23

000001f2 <__udivmodhi4_ep>:
 1f2:	88 1f       	adc	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	5a 95       	dec	r21
 1f8:	a9 f7       	brne	.-22     	; 0x1e4 <__udivmodhi4_loop>
 1fa:	80 95       	com	r24
 1fc:	90 95       	com	r25
 1fe:	bc 01       	movw	r22, r24
 200:	cd 01       	movw	r24, r26
 202:	08 95       	ret

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
