
hw7_10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000002ba  0000032e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ce  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000763  00000000  00000000  00000dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000046c  00000000  00000000  00001521  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001990  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041e  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004da  00000000  00000000  00001e12  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000022ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea eb       	ldi	r30, 0xBA	; 186
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 95 00 	call	0x12a	; 0x12a <main>
  8e:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <disp7seg>:
	0x7F,0x6F,0x77,0x7C,
	0x39,0x5E,0x79,0x71 };

void disp7seg(unsigned char a){
	unsigned char tmp;
	tmp = TB7SEG[a];
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	e0 50       	subi	r30, 0x00	; 0
  9c:	ff 4f       	sbci	r31, 0xFF	; 255
  9e:	80 81       	ld	r24, Z
	PORTC = tmp;
  a0:	88 b9       	out	0x08, r24	; 8
	tmp = tmp >>6;
	tmp &= 0x01;
	if (tmp)
  a2:	86 ff       	sbrs	r24, 6
  a4:	02 c0       	rjmp	.+4      	; 0xaa <disp7seg+0x14>
		PORTD |= 0x01;
  a6:	58 9a       	sbi	0x0b, 0	; 11
  a8:	08 95       	ret
	else
		PORTD &= 0xfe;
  aa:	58 98       	cbi	0x0b, 0	; 11
  ac:	08 95       	ret

000000ae <bias_transistor>:
}

void bias_transistor(enum my_digits a){
	unsigned char tmp1,tmp2;
	tmp1 = PORTD;
  ae:	9b b1       	in	r25, 0x0b	; 11
	tmp1 &=0x01;
  b0:	91 70       	andi	r25, 0x01	; 1
	switch(a){
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	21 f0       	breq	.+8      	; 0xbe <bias_transistor+0x10>
  b6:	48 f0       	brcs	.+18     	; 0xca <bias_transistor+0x1c>
  b8:	82 30       	cpi	r24, 0x02	; 2
  ba:	19 f0       	breq	.+6      	; 0xc2 <bias_transistor+0x14>
  bc:	04 c0       	rjmp	.+8      	; 0xc6 <bias_transistor+0x18>
		case ones:tmp2 = 0x80;break;
		case tens:tmp2 = 0x40;break;
  be:	80 e4       	ldi	r24, 0x40	; 64
  c0:	05 c0       	rjmp	.+10     	; 0xcc <bias_transistor+0x1e>
		case hundreds:tmp2 = 0x20;break;
  c2:	80 e2       	ldi	r24, 0x20	; 32
  c4:	03 c0       	rjmp	.+6      	; 0xcc <bias_transistor+0x1e>
		default:	tmp2 = 0x10;break;
  c6:	80 e1       	ldi	r24, 0x10	; 16
  c8:	01 c0       	rjmp	.+2      	; 0xcc <bias_transistor+0x1e>
void bias_transistor(enum my_digits a){
	unsigned char tmp1,tmp2;
	tmp1 = PORTD;
	tmp1 &=0x01;
	switch(a){
		case ones:tmp2 = 0x80;break;
  ca:	80 e8       	ldi	r24, 0x80	; 128
		case tens:tmp2 = 0x40;break;
		case hundreds:tmp2 = 0x20;break;
		default:	tmp2 = 0x10;break;
	}
	if(tmp1)
  cc:	99 23       	and	r25, r25
  ce:	19 f0       	breq	.+6      	; 0xd6 <bias_transistor+0x28>
	PORTD = tmp2 | tmp1;
  d0:	98 2b       	or	r25, r24
  d2:	9b b9       	out	0x0b, r25	; 11
  d4:	08 95       	ret
	else
	PORTD = tmp2;
  d6:	8b b9       	out	0x0b, r24	; 11
  d8:	08 95       	ret

000000da <read_switch>:
}

unsigned char read_switch(){
	unsigned char sw;
	unsigned char mode = nothing ;
	sw = PIND >> 1;
  da:	89 b1       	in	r24, 0x09	; 9
  dc:	86 95       	lsr	r24
	sw &= 0x03;
	if (sw != 3)	{
  de:	83 70       	andi	r24, 0x03	; 3
  e0:	83 30       	cpi	r24, 0x03	; 3
  e2:	d1 f0       	breq	.+52     	; 0x118 <read_switch+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	8f e1       	ldi	r24, 0x1F	; 31
  e6:	9e e4       	ldi	r25, 0x4E	; 78
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <read_switch+0xe>
  ec:	00 c0       	rjmp	.+0      	; 0xee <read_switch+0x14>
  ee:	00 00       	nop
		_delay_ms(10);
		sw = PIND >> 1;
  f0:	89 b1       	in	r24, 0x09	; 9
  f2:	86 95       	lsr	r24
		sw &= 0x03;
  f4:	83 70       	andi	r24, 0x03	; 3
		if(sw != 3){
  f6:	83 30       	cpi	r24, 0x03	; 3
  f8:	89 f0       	breq	.+34     	; 0x11c <read_switch+0x42>
			if(sw == 1){
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	21 f0       	breq	.+8      	; 0x106 <read_switch+0x2c>
				mode = inc;
			}
			
			else if (sw == 2){
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	21 f4       	brne	.+8      	; 0x10a <read_switch+0x30>
				mode = reset;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	03 c0       	rjmp	.+6      	; 0x10c <read_switch+0x32>
		_delay_ms(10);
		sw = PIND >> 1;
		sw &= 0x03;
		if(sw != 3){
			if(sw == 1){
				mode = inc;
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	01 c0       	rjmp	.+2      	; 0x10c <read_switch+0x32>
	PORTD = tmp2;
}

unsigned char read_switch(){
	unsigned char sw;
	unsigned char mode = nothing ;
 10a:	82 e0       	ldi	r24, 0x02	; 2
			
			else if (sw == 2){
				mode = reset;
			}
			do {
				sw = PIND >> 1;
 10c:	99 b1       	in	r25, 0x09	; 9
 10e:	96 95       	lsr	r25
				sw &= 0x03;
			} while (sw != 3);
 110:	93 70       	andi	r25, 0x03	; 3
 112:	93 30       	cpi	r25, 0x03	; 3
 114:	d9 f7       	brne	.-10     	; 0x10c <read_switch+0x32>
 116:	08 95       	ret
		}
		return mode;
	}
	else
		return mode;
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	08 95       	ret
	PORTD = tmp2;
}

unsigned char read_switch(){
	unsigned char sw;
	unsigned char mode = nothing ;
 11c:	82 e0       	ldi	r24, 0x02	; 2
	}
	else
		return mode;
	
	return mode;
}
 11e:	08 95       	ret

00000120 <initPort>:
void initPort(void)
{
	DDRC = 0x3f; //0x3f 0b00111111
 120:	8f e3       	ldi	r24, 0x3F	; 63
 122:	87 b9       	out	0x07, r24	; 7
 	DDRD = 0xf9; //0xf9 0b11111001
 124:	89 ef       	ldi	r24, 0xF9	; 249
 126:	8a b9       	out	0x0a, r24	; 10
 128:	08 95       	ret

0000012a <main>:
	signed int count = 0;
	unsigned int countForSec = 0;
	unsigned char tmp;
	enum my_digits state = ones;
	unsigned char sw;
	initPort();
 12a:	0e 94 90 00 	call	0x120	; 0x120 <initPort>
 12e:	8f e0       	ldi	r24, 0x0F	; 15
 130:	97 e2       	ldi	r25, 0x27	; 39
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x8>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0xe>
 138:	00 00       	nop
int main(void)
{
	signed int count = 0;
	unsigned int countForSec = 0;
	unsigned char tmp;
	enum my_digits state = ones;
 13a:	c0 e0       	ldi	r28, 0x00	; 0
	unsigned char sw;
	initPort();
	while (1) {
		_delay_ms(5);
		countForSec+=10;
 13c:	0a e0       	ldi	r16, 0x0A	; 10
 13e:	10 e0       	ldi	r17, 0x00	; 0
	DDRC = 0x3f; //0x3f 0b00111111
 	DDRD = 0xf9; //0xf9 0b11111001
}
int main(void)
{
	signed int count = 0;
 140:	e1 2c       	mov	r14, r1
 142:	f1 2c       	mov	r15, r1
				state = tens;
				break;
			
			case tens:
				tmp = (count/10)%10;
				disp7seg(tmp);
 144:	0f 2e       	mov	r0, r31
 146:	fa e0       	ldi	r31, 0x0A	; 10
 148:	cf 2e       	mov	r12, r31
 14a:	d1 2c       	mov	r13, r1
 14c:	f0 2d       	mov	r31, r0
				_delay_ms(10);
				state = hundreds;
 14e:	68 94       	set
 150:	55 24       	eor	r5, r5
 152:	51 f8       	bld	r5, 1
			
			case ones:
				tmp = count%10;
				disp7seg(tmp);
				_delay_ms(10);
				state = tens;
 154:	66 24       	eor	r6, r6
 156:	63 94       	inc	r6
				state = hundreds;
				break;
			
			case hundreds:
				tmp = (count/100)%10;
				disp7seg(tmp);
 158:	0f 2e       	mov	r0, r31
 15a:	f4 e6       	ldi	r31, 0x64	; 100
 15c:	8f 2e       	mov	r8, r31
 15e:	91 2c       	mov	r9, r1
 160:	f0 2d       	mov	r31, r0
				_delay_ms(10);
				state = thousands;
 162:	0f 2e       	mov	r0, r31
 164:	f3 e0       	ldi	r31, 0x03	; 3
 166:	7f 2e       	mov	r7, r31
 168:	f0 2d       	mov	r31, r0
				break;
			
			case thousands:
				tmp = (count/1000)%10;
				disp7seg(tmp);
 16a:	0f 2e       	mov	r0, r31
 16c:	f8 ee       	ldi	r31, 0xE8	; 232
 16e:	af 2e       	mov	r10, r31
 170:	f3 e0       	ldi	r31, 0x03	; 3
 172:	bf 2e       	mov	r11, r31
 174:	f0 2d       	mov	r31, r0
				_delay_ms(10);
				state = ones;
 176:	d0 e0       	ldi	r29, 0x00	; 0
 178:	27 c0       	rjmp	.+78     	; 0x1c8 <main+0x9e>
 17a:	8f e0       	ldi	r24, 0x0F	; 15
 17c:	97 e2       	ldi	r25, 0x27	; 39
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <main+0x54>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0x5a>
 184:	00 00       	nop
	enum my_digits state = ones;
	unsigned char sw;
	initPort();
	while (1) {
		_delay_ms(5);
		countForSec+=10;
 186:	06 5f       	subi	r16, 0xF6	; 246
 188:	1f 4f       	sbci	r17, 0xFF	; 255
		if (countForSec==40){
 18a:	08 32       	cpi	r16, 0x28	; 40
 18c:	11 05       	cpc	r17, r1
 18e:	e1 f4       	brne	.+56     	; 0x1c8 <main+0x9e>
			countForSec=0;
			sw = read_switch();
 190:	0e 94 6d 00 	call	0xda	; 0xda <read_switch>
			if (sw == inc){
 194:	81 11       	cpse	r24, r1
 196:	0c c0       	rjmp	.+24     	; 0x1b0 <main+0x86>
				count++;
 198:	9f ef       	ldi	r25, 0xFF	; 255
 19a:	e9 1a       	sub	r14, r25
 19c:	f9 0a       	sbc	r15, r25
				if (count>10){
 19e:	8b e0       	ldi	r24, 0x0B	; 11
 1a0:	e8 16       	cp	r14, r24
 1a2:	f1 04       	cpc	r15, r1
 1a4:	64 f0       	brlt	.+24     	; 0x1be <main+0x94>
	initPort();
	while (1) {
		_delay_ms(5);
		countForSec+=10;
		if (countForSec==40){
			countForSec=0;
 1a6:	00 e0       	ldi	r16, 0x00	; 0
 1a8:	10 e0       	ldi	r17, 0x00	; 0
			sw = read_switch();
			if (sw == inc){
				count++;
				if (count>10){
					count = 0;
 1aa:	e1 2c       	mov	r14, r1
 1ac:	f1 2c       	mov	r15, r1
 1ae:	0c c0       	rjmp	.+24     	; 0x1c8 <main+0x9e>
				}
			}
			else if (sw == reset)
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	41 f4       	brne	.+16     	; 0x1c4 <main+0x9a>
	initPort();
	while (1) {
		_delay_ms(5);
		countForSec+=10;
		if (countForSec==40){
			countForSec=0;
 1b4:	00 e0       	ldi	r16, 0x00	; 0
 1b6:	10 e0       	ldi	r17, 0x00	; 0
				if (count>10){
					count = 0;
				}
			}
			else if (sw == reset)
			count=0;
 1b8:	e1 2c       	mov	r14, r1
 1ba:	f1 2c       	mov	r15, r1
 1bc:	05 c0       	rjmp	.+10     	; 0x1c8 <main+0x9e>
	initPort();
	while (1) {
		_delay_ms(5);
		countForSec+=10;
		if (countForSec==40){
			countForSec=0;
 1be:	00 e0       	ldi	r16, 0x00	; 0
 1c0:	10 e0       	ldi	r17, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <main+0x9e>
 1c4:	00 e0       	ldi	r16, 0x00	; 0
 1c6:	10 e0       	ldi	r17, 0x00	; 0
			}
			else if (sw == reset)
			count=0;
		}
		
		bias_transistor(state);
 1c8:	8c 2f       	mov	r24, r28
 1ca:	0e 94 57 00 	call	0xae	; 0xae <bias_transistor>
		switch(state){
 1ce:	c1 30       	cpi	r28, 0x01	; 1
 1d0:	a1 f0       	breq	.+40     	; 0x1fa <main+0xd0>
 1d2:	28 f0       	brcs	.+10     	; 0x1de <main+0xb4>
 1d4:	c2 30       	cpi	r28, 0x02	; 2
 1d6:	19 f1       	breq	.+70     	; 0x21e <main+0xf4>
 1d8:	c3 30       	cpi	r28, 0x03	; 3
 1da:	99 f1       	breq	.+102    	; 0x242 <main+0x118>
 1dc:	ce cf       	rjmp	.-100    	; 0x17a <main+0x50>
			
			case ones:
				tmp = count%10;
				disp7seg(tmp);
 1de:	c7 01       	movw	r24, r14
 1e0:	b6 01       	movw	r22, r12
 1e2:	0e 94 33 01 	call	0x266	; 0x266 <__divmodhi4>
 1e6:	0e 94 4b 00 	call	0x96	; 0x96 <disp7seg>
 1ea:	8f e1       	ldi	r24, 0x1F	; 31
 1ec:	9e e4       	ldi	r25, 0x4E	; 78
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <main+0xc4>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <main+0xca>
 1f4:	00 00       	nop
				_delay_ms(10);
				state = tens;
 1f6:	c6 2d       	mov	r28, r6
				break;
 1f8:	c0 cf       	rjmp	.-128    	; 0x17a <main+0x50>
			
			case tens:
				tmp = (count/10)%10;
				disp7seg(tmp);
 1fa:	c7 01       	movw	r24, r14
 1fc:	b6 01       	movw	r22, r12
 1fe:	0e 94 33 01 	call	0x266	; 0x266 <__divmodhi4>
 202:	cb 01       	movw	r24, r22
 204:	b6 01       	movw	r22, r12
 206:	0e 94 33 01 	call	0x266	; 0x266 <__divmodhi4>
 20a:	0e 94 4b 00 	call	0x96	; 0x96 <disp7seg>
 20e:	8f e1       	ldi	r24, 0x1F	; 31
 210:	9e e4       	ldi	r25, 0x4E	; 78
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <main+0xe8>
 216:	00 c0       	rjmp	.+0      	; 0x218 <main+0xee>
 218:	00 00       	nop
				_delay_ms(10);
				state = hundreds;
 21a:	c5 2d       	mov	r28, r5
				break;
 21c:	ae cf       	rjmp	.-164    	; 0x17a <main+0x50>
			
			case hundreds:
				tmp = (count/100)%10;
				disp7seg(tmp);
 21e:	c7 01       	movw	r24, r14
 220:	b4 01       	movw	r22, r8
 222:	0e 94 33 01 	call	0x266	; 0x266 <__divmodhi4>
 226:	cb 01       	movw	r24, r22
 228:	b6 01       	movw	r22, r12
 22a:	0e 94 33 01 	call	0x266	; 0x266 <__divmodhi4>
 22e:	0e 94 4b 00 	call	0x96	; 0x96 <disp7seg>
 232:	8f e1       	ldi	r24, 0x1F	; 31
 234:	9e e4       	ldi	r25, 0x4E	; 78
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <main+0x10c>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0x112>
 23c:	00 00       	nop
				_delay_ms(10);
				state = thousands;
 23e:	c7 2d       	mov	r28, r7
				break;
 240:	9c cf       	rjmp	.-200    	; 0x17a <main+0x50>
			
			case thousands:
				tmp = (count/1000)%10;
				disp7seg(tmp);
 242:	c7 01       	movw	r24, r14
 244:	b5 01       	movw	r22, r10
 246:	0e 94 33 01 	call	0x266	; 0x266 <__divmodhi4>
 24a:	cb 01       	movw	r24, r22
 24c:	b6 01       	movw	r22, r12
 24e:	0e 94 33 01 	call	0x266	; 0x266 <__divmodhi4>
 252:	0e 94 4b 00 	call	0x96	; 0x96 <disp7seg>
 256:	8f e1       	ldi	r24, 0x1F	; 31
 258:	9e e4       	ldi	r25, 0x4E	; 78
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <main+0x130>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x136>
 260:	00 00       	nop
				_delay_ms(10);
				state = ones;
 262:	cd 2f       	mov	r28, r29
				break;
 264:	8a cf       	rjmp	.-236    	; 0x17a <main+0x50>

00000266 <__divmodhi4>:
 266:	97 fb       	bst	r25, 7
 268:	07 2e       	mov	r0, r23
 26a:	16 f4       	brtc	.+4      	; 0x270 <__divmodhi4+0xa>
 26c:	00 94       	com	r0
 26e:	07 d0       	rcall	.+14     	; 0x27e <__divmodhi4_neg1>
 270:	77 fd       	sbrc	r23, 7
 272:	09 d0       	rcall	.+18     	; 0x286 <__divmodhi4_neg2>
 274:	0e 94 47 01 	call	0x28e	; 0x28e <__udivmodhi4>
 278:	07 fc       	sbrc	r0, 7
 27a:	05 d0       	rcall	.+10     	; 0x286 <__divmodhi4_neg2>
 27c:	3e f4       	brtc	.+14     	; 0x28c <__divmodhi4_exit>

0000027e <__divmodhi4_neg1>:
 27e:	90 95       	com	r25
 280:	81 95       	neg	r24
 282:	9f 4f       	sbci	r25, 0xFF	; 255
 284:	08 95       	ret

00000286 <__divmodhi4_neg2>:
 286:	70 95       	com	r23
 288:	61 95       	neg	r22
 28a:	7f 4f       	sbci	r23, 0xFF	; 255

0000028c <__divmodhi4_exit>:
 28c:	08 95       	ret

0000028e <__udivmodhi4>:
 28e:	aa 1b       	sub	r26, r26
 290:	bb 1b       	sub	r27, r27
 292:	51 e1       	ldi	r21, 0x11	; 17
 294:	07 c0       	rjmp	.+14     	; 0x2a4 <__udivmodhi4_ep>

00000296 <__udivmodhi4_loop>:
 296:	aa 1f       	adc	r26, r26
 298:	bb 1f       	adc	r27, r27
 29a:	a6 17       	cp	r26, r22
 29c:	b7 07       	cpc	r27, r23
 29e:	10 f0       	brcs	.+4      	; 0x2a4 <__udivmodhi4_ep>
 2a0:	a6 1b       	sub	r26, r22
 2a2:	b7 0b       	sbc	r27, r23

000002a4 <__udivmodhi4_ep>:
 2a4:	88 1f       	adc	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	5a 95       	dec	r21
 2aa:	a9 f7       	brne	.-22     	; 0x296 <__udivmodhi4_loop>
 2ac:	80 95       	com	r24
 2ae:	90 95       	com	r25
 2b0:	bc 01       	movw	r22, r24
 2b2:	cd 01       	movw	r24, r26
 2b4:	08 95       	ret

000002b6 <_exit>:
 2b6:	f8 94       	cli

000002b8 <__stop_program>:
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <__stop_program>
