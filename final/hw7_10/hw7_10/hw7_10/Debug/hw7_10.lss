
hw7_10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002ac  00000340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010a  0080010a  0000034a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000829  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006da  00000000  00000000  00000c25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000034d  00000000  00000000  000012ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  0000164c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044d  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012e  00000000  00000000  00001afd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001c2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 31 01 	call	0x262	; 0x262 <main>
  9e:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initial_mcu>:

void decsCount(){
	if(count ==0 ){
		count = 9999;
		}else{
		count--;
  a6:	81 ef       	ldi	r24, 0xF1	; 241
  a8:	8a b9       	out	0x0a, r24	; 10
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	87 b9       	out	0x07, r24	; 7
  ae:	08 95       	ret

000000b0 <incrsCount>:
  b0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <count>
  b4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <count+0x1>
  b8:	8f 30       	cpi	r24, 0x0F	; 15
  ba:	27 e2       	ldi	r18, 0x27	; 39
  bc:	92 07       	cpc	r25, r18
  be:	28 f0       	brcs	.+10     	; 0xca <incrsCount+0x1a>
  c0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <count+0x1>
  c4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <count>
  c8:	08 95       	ret
  ca:	01 96       	adiw	r24, 0x01	; 1
  cc:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <count+0x1>
  d0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <count>
  d4:	08 95       	ret

000000d6 <redisply7segment>:
}

void redisply7segment(){
	unsigned char valueToDisplay = 0;
	unsigned char digitToDisplay;
	switch (segmentDigitDisply)
  d6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	41 f1       	breq	.+80     	; 0x12e <redisply7segment+0x58>
  de:	38 f0       	brcs	.+14     	; 0xee <redisply7segment+0x18>
  e0:	82 30       	cpi	r24, 0x02	; 2
  e2:	09 f4       	brne	.+2      	; 0xe6 <redisply7segment+0x10>
  e4:	4b c0       	rjmp	.+150    	; 0x17c <redisply7segment+0xa6>
  e6:	83 30       	cpi	r24, 0x03	; 3
  e8:	09 f4       	brne	.+2      	; 0xec <redisply7segment+0x16>
  ea:	78 c0       	rjmp	.+240    	; 0x1dc <redisply7segment+0x106>
  ec:	ac c0       	rjmp	.+344    	; 0x246 <redisply7segment+0x170>
	{
		case 0:
		valueToDisplay = count%10;
  ee:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <count>
  f2:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <count+0x1>
  f6:	2e 2f       	mov	r18, r30
  f8:	ad ec       	ldi	r26, 0xCD	; 205
  fa:	bc ec       	ldi	r27, 0xCC	; 204
  fc:	0e 94 45 01 	call	0x28a	; 0x28a <__umulhisi3>
 100:	96 95       	lsr	r25
 102:	87 95       	ror	r24
 104:	96 95       	lsr	r25
 106:	87 95       	ror	r24
 108:	96 95       	lsr	r25
 10a:	87 95       	ror	r24
 10c:	9c 01       	movw	r18, r24
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	82 0f       	add	r24, r18
 120:	93 1f       	adc	r25, r19
 122:	e8 1b       	sub	r30, r24
 124:	8e 2f       	mov	r24, r30
		digitToDisplay = 1<<(7-segmentDigitDisply); //0b10000000
		segmentDigitDisply=1;
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <__data_end>
		break;
 12c:	8f c0       	rjmp	.+286    	; 0x24c <redisply7segment+0x176>
		case 1:
		valueToDisplay = (count%100)/10;
 12e:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <count>
 132:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <count+0x1>
 136:	9a 01       	movw	r18, r20
 138:	36 95       	lsr	r19
 13a:	27 95       	ror	r18
 13c:	36 95       	lsr	r19
 13e:	27 95       	ror	r18
 140:	ab e7       	ldi	r26, 0x7B	; 123
 142:	b4 e1       	ldi	r27, 0x14	; 20
 144:	0e 94 45 01 	call	0x28a	; 0x28a <__umulhisi3>
 148:	96 95       	lsr	r25
 14a:	87 95       	ror	r24
 14c:	64 e6       	ldi	r22, 0x64	; 100
 14e:	68 9f       	mul	r22, r24
 150:	90 01       	movw	r18, r0
 152:	69 9f       	mul	r22, r25
 154:	30 0d       	add	r19, r0
 156:	11 24       	eor	r1, r1
 158:	ca 01       	movw	r24, r20
 15a:	82 1b       	sub	r24, r18
 15c:	93 0b       	sbc	r25, r19
 15e:	9c 01       	movw	r18, r24
 160:	ad ec       	ldi	r26, 0xCD	; 205
 162:	bc ec       	ldi	r27, 0xCC	; 204
 164:	0e 94 45 01 	call	0x28a	; 0x28a <__umulhisi3>
 168:	96 95       	lsr	r25
 16a:	87 95       	ror	r24
 16c:	96 95       	lsr	r25
 16e:	87 95       	ror	r24
 170:	96 95       	lsr	r25
 172:	87 95       	ror	r24
		digitToDisplay = 1<<(7-segmentDigitDisply); //0b01000000
		segmentDigitDisply=2;
 174:	92 e0       	ldi	r25, 0x02	; 2
 176:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <__data_end>
		break;
 17a:	68 c0       	rjmp	.+208    	; 0x24c <redisply7segment+0x176>
		case 2:
		valueToDisplay = (count%1000)/100;
 17c:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <count>
 180:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <count+0x1>
 184:	9a 01       	movw	r18, r20
 186:	36 95       	lsr	r19
 188:	27 95       	ror	r18
 18a:	36 95       	lsr	r19
 18c:	27 95       	ror	r18
 18e:	36 95       	lsr	r19
 190:	27 95       	ror	r18
 192:	a5 ec       	ldi	r26, 0xC5	; 197
 194:	b0 e2       	ldi	r27, 0x20	; 32
 196:	0e 94 45 01 	call	0x28a	; 0x28a <__umulhisi3>
 19a:	92 95       	swap	r25
 19c:	82 95       	swap	r24
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	89 27       	eor	r24, r25
 1a2:	9f 70       	andi	r25, 0x0F	; 15
 1a4:	89 27       	eor	r24, r25
 1a6:	68 ee       	ldi	r22, 0xE8	; 232
 1a8:	73 e0       	ldi	r23, 0x03	; 3
 1aa:	86 9f       	mul	r24, r22
 1ac:	90 01       	movw	r18, r0
 1ae:	87 9f       	mul	r24, r23
 1b0:	30 0d       	add	r19, r0
 1b2:	96 9f       	mul	r25, r22
 1b4:	30 0d       	add	r19, r0
 1b6:	11 24       	eor	r1, r1
 1b8:	ca 01       	movw	r24, r20
 1ba:	82 1b       	sub	r24, r18
 1bc:	93 0b       	sbc	r25, r19
 1be:	9c 01       	movw	r18, r24
 1c0:	36 95       	lsr	r19
 1c2:	27 95       	ror	r18
 1c4:	36 95       	lsr	r19
 1c6:	27 95       	ror	r18
 1c8:	ab e7       	ldi	r26, 0x7B	; 123
 1ca:	b4 e1       	ldi	r27, 0x14	; 20
 1cc:	0e 94 45 01 	call	0x28a	; 0x28a <__umulhisi3>
 1d0:	96 95       	lsr	r25
 1d2:	87 95       	ror	r24
		digitToDisplay = 1<<(7-segmentDigitDisply); //0b00100000
		segmentDigitDisply=3;
 1d4:	93 e0       	ldi	r25, 0x03	; 3
 1d6:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <__data_end>
		break;
 1da:	38 c0       	rjmp	.+112    	; 0x24c <redisply7segment+0x176>
		case 3:
		valueToDisplay = (count%10000)/1000;
 1dc:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <count>
 1e0:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <count+0x1>
 1e4:	9a 01       	movw	r18, r20
 1e6:	32 95       	swap	r19
 1e8:	22 95       	swap	r18
 1ea:	2f 70       	andi	r18, 0x0F	; 15
 1ec:	23 27       	eor	r18, r19
 1ee:	3f 70       	andi	r19, 0x0F	; 15
 1f0:	23 27       	eor	r18, r19
 1f2:	a7 e4       	ldi	r26, 0x47	; 71
 1f4:	b3 e0       	ldi	r27, 0x03	; 3
 1f6:	0e 94 45 01 	call	0x28a	; 0x28a <__umulhisi3>
 1fa:	96 95       	lsr	r25
 1fc:	87 95       	ror	r24
 1fe:	96 95       	lsr	r25
 200:	87 95       	ror	r24
 202:	96 95       	lsr	r25
 204:	87 95       	ror	r24
 206:	60 e1       	ldi	r22, 0x10	; 16
 208:	77 e2       	ldi	r23, 0x27	; 39
 20a:	86 9f       	mul	r24, r22
 20c:	90 01       	movw	r18, r0
 20e:	87 9f       	mul	r24, r23
 210:	30 0d       	add	r19, r0
 212:	96 9f       	mul	r25, r22
 214:	30 0d       	add	r19, r0
 216:	11 24       	eor	r1, r1
 218:	ca 01       	movw	r24, r20
 21a:	82 1b       	sub	r24, r18
 21c:	93 0b       	sbc	r25, r19
 21e:	9c 01       	movw	r18, r24
 220:	36 95       	lsr	r19
 222:	27 95       	ror	r18
 224:	36 95       	lsr	r19
 226:	27 95       	ror	r18
 228:	36 95       	lsr	r19
 22a:	27 95       	ror	r18
 22c:	a5 ec       	ldi	r26, 0xC5	; 197
 22e:	b0 e2       	ldi	r27, 0x20	; 32
 230:	0e 94 45 01 	call	0x28a	; 0x28a <__umulhisi3>
 234:	92 95       	swap	r25
 236:	82 95       	swap	r24
 238:	8f 70       	andi	r24, 0x0F	; 15
 23a:	89 27       	eor	r24, r25
 23c:	9f 70       	andi	r25, 0x0F	; 15
 23e:	89 27       	eor	r24, r25
		digitToDisplay = 1<<(7-segmentDigitDisply); //0b00010000
		segmentDigitDisply=0;
 240:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
		break;
 244:	03 c0       	rjmp	.+6      	; 0x24c <redisply7segment+0x176>
		default:
		segmentDigitDisply=0;
 246:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
		count--;
	}
}

void redisply7segment(){
	unsigned char valueToDisplay = 0;
 24a:	80 e0       	ldi	r24, 0x00	; 0
		default:
		segmentDigitDisply=0;
		break;
	}
	
	valueToDisplay = lookupTable[valueToDisplay];
 24c:	e8 2f       	mov	r30, r24
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	e0 50       	subi	r30, 0x00	; 0
 252:	ff 4f       	sbci	r31, 0xFF	; 255
 254:	80 81       	ld	r24, Z
	PORTC = valueToDisplay;
 256:	88 b9       	out	0x08, r24	; 8
	PORTD = ((valueToDisplay>>6) & 0x01) || (digitToDisplay & 0x11110000);
 258:	86 fb       	bst	r24, 6
 25a:	88 27       	eor	r24, r24
 25c:	80 f9       	bld	r24, 0
 25e:	8b b9       	out	0x0b, r24	; 11
 260:	08 95       	ret

00000262 <main>:
}

int main(){
	initial_mcu();
 262:	0e 94 53 00 	call	0xa6	; 0xa6 <initial_mcu>
	valueToDisplay = lookupTable[valueToDisplay];
	PORTC = valueToDisplay;
	PORTD = ((valueToDisplay>>6) & 0x01) || (digitToDisplay & 0x11110000);
}

int main(){
 266:	c4 e6       	ldi	r28, 0x64	; 100
	unsigned char direction=0;  // 0 is incr 1 is dec
	unsigned char isDirectionChange=0; // 0 mean unchange 1 mean has change
	
	while (1)
	{
		isSW1press = PIND | ~(0b00000010);
 268:	89 b1       	in	r24, 0x09	; 9
		isSW2press = PIND | ~(0b00000100);
 26a:	89 b1       	in	r24, 0x09	; 9
		if(!isSW2press){
			count = 0;
			redisply7segment();
		}

		redisply7segment();
 26c:	0e 94 6b 00 	call	0xd6	; 0xd6 <redisply7segment>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 270:	8f e1       	ldi	r24, 0x1F	; 31
 272:	9e e4       	ldi	r25, 0x4E	; 78
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <main+0x12>
 278:	00 c0       	rjmp	.+0      	; 0x27a <main+0x18>
 27a:	00 00       	nop
 27c:	c1 50       	subi	r28, 0x01	; 1

		_delay_ms(10);
		delayCount++;
		
		if(delayCount>=100){
 27e:	a1 f7       	brne	.-24     	; 0x268 <main+0x6>
			if(direction == 0){
				incrsCount();
 280:	0e 94 58 00 	call	0xb0	; 0xb0 <incrsCount>
				}else{
				decsCount();
			}
			redisply7segment();
 284:	0e 94 6b 00 	call	0xd6	; 0xd6 <redisply7segment>
 288:	ee cf       	rjmp	.-36     	; 0x266 <main+0x4>

0000028a <__umulhisi3>:
 28a:	a2 9f       	mul	r26, r18
 28c:	b0 01       	movw	r22, r0
 28e:	b3 9f       	mul	r27, r19
 290:	c0 01       	movw	r24, r0
 292:	a3 9f       	mul	r26, r19
 294:	70 0d       	add	r23, r0
 296:	81 1d       	adc	r24, r1
 298:	11 24       	eor	r1, r1
 29a:	91 1d       	adc	r25, r1
 29c:	b2 9f       	mul	r27, r18
 29e:	70 0d       	add	r23, r0
 2a0:	81 1d       	adc	r24, r1
 2a2:	11 24       	eor	r1, r1
 2a4:	91 1d       	adc	r25, r1
 2a6:	08 95       	ret

000002a8 <_exit>:
 2a8:	f8 94       	cli

000002aa <__stop_program>:
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <__stop_program>
