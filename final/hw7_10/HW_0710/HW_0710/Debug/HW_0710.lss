
HW_0710.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000002a2  00000316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000326  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000abc  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000762  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003bf  00000000  00000000  000015fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  000019c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000415  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000493  00000000  00000000  00001e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000022e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ea       	ldi	r30, 0xA2	; 162
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 21 01 	call	0x242	; 0x242 <main>
  8e:	0c 94 4f 01 	jmp	0x29e	; 0x29e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <rander_value>:
			out_value  = run_number(out_value);
		}
	}
}

void rander_value(unsigned int number){
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	ec 01       	movw	r28, r24
	//0b D4 D5 D6 D7
	static char port_d_output[] = {0b10000001,0b01000001,0b00100001,0b00010001};

	// last decimal
	temp = number % 10;
	PORTD  = port_d_output[0];
  9c:	81 e8       	ldi	r24, 0x81	; 129
  9e:	8b b9       	out	0x0b, r24	; 11
		0x39,
		0x5E,
		0x79,
		0x71
	};
	return lookuptable[input];
  a0:	9e 01       	movw	r18, r28
  a2:	ad ec       	ldi	r26, 0xCD	; 205
  a4:	bc ec       	ldi	r27, 0xCC	; 204
  a6:	0e 94 40 01 	call	0x280	; 0x280 <__umulhisi3>
  aa:	ac 01       	movw	r20, r24
  ac:	56 95       	lsr	r21
  ae:	47 95       	ror	r20
  b0:	56 95       	lsr	r21
  b2:	47 95       	ror	r20
  b4:	56 95       	lsr	r21
  b6:	47 95       	ror	r20
  b8:	9a 01       	movw	r18, r20
  ba:	22 0f       	add	r18, r18
  bc:	33 1f       	adc	r19, r19
  be:	ca 01       	movw	r24, r20
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	82 0f       	add	r24, r18
  ce:	93 1f       	adc	r25, r19
  d0:	fe 01       	movw	r30, r28
  d2:	e8 1b       	sub	r30, r24
  d4:	f9 0b       	sbc	r31, r25
  d6:	ff 27       	eor	r31, r31
  d8:	e0 50       	subi	r30, 0x00	; 0
  da:	ff 4f       	sbci	r31, 0xFF	; 255
  dc:	80 81       	ld	r24, Z

	// last decimal
	temp = number % 10;
	PORTD  = port_d_output[0];
	out_led = bin_to_7seg(temp);
	PORTC = out_led;
  de:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	8f e1       	ldi	r24, 0x1F	; 31
  e2:	9e e4       	ldi	r25, 0x4E	; 78
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <rander_value+0x4e>
  e8:	00 c0       	rjmp	.+0      	; 0xea <rander_value+0x54>
  ea:	00 00       	nop
	_delay_ms(5);
	
	// ten decimal
	temp = (number / 10) % 10;
	PORTD =  port_d_output[1];
  ec:	81 e4       	ldi	r24, 0x41	; 65
  ee:	8b b9       	out	0x0b, r24	; 11
		0x39,
		0x5E,
		0x79,
		0x71
	};
	return lookuptable[input];
  f0:	9a 01       	movw	r18, r20
  f2:	0e 94 40 01 	call	0x280	; 0x280 <__umulhisi3>
  f6:	96 95       	lsr	r25
  f8:	87 95       	ror	r24
  fa:	96 95       	lsr	r25
  fc:	87 95       	ror	r24
  fe:	96 95       	lsr	r25
 100:	87 95       	ror	r24
 102:	9c 01       	movw	r18, r24
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	82 0f       	add	r24, r18
 116:	93 1f       	adc	r25, r19
 118:	fa 01       	movw	r30, r20
 11a:	e8 1b       	sub	r30, r24
 11c:	f9 0b       	sbc	r31, r25
 11e:	ff 27       	eor	r31, r31
 120:	e0 50       	subi	r30, 0x00	; 0
 122:	ff 4f       	sbci	r31, 0xFF	; 255
 124:	80 81       	ld	r24, Z
	
	// ten decimal
	temp = (number / 10) % 10;
	PORTD =  port_d_output[1];
	out_led = bin_to_7seg(temp);
	PORTC = out_led;
 126:	88 b9       	out	0x08, r24	; 8
 128:	8f e1       	ldi	r24, 0x1F	; 31
 12a:	9e e4       	ldi	r25, 0x4E	; 78
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <rander_value+0x96>
 130:	00 c0       	rjmp	.+0      	; 0x132 <rander_value+0x9c>
 132:	00 00       	nop
	_delay_ms(5);
	
	// Hundred Decimal
	temp = (number/100 )% 10;
	PORTD = port_d_output[2];
 134:	81 e2       	ldi	r24, 0x21	; 33
 136:	8b b9       	out	0x0b, r24	; 11
		0x39,
		0x5E,
		0x79,
		0x71
	};
	return lookuptable[input];
 138:	9e 01       	movw	r18, r28
 13a:	36 95       	lsr	r19
 13c:	27 95       	ror	r18
 13e:	36 95       	lsr	r19
 140:	27 95       	ror	r18
 142:	ab e7       	ldi	r26, 0x7B	; 123
 144:	b4 e1       	ldi	r27, 0x14	; 20
 146:	0e 94 40 01 	call	0x280	; 0x280 <__umulhisi3>
 14a:	ac 01       	movw	r20, r24
 14c:	56 95       	lsr	r21
 14e:	47 95       	ror	r20
 150:	9a 01       	movw	r18, r20
 152:	ad ec       	ldi	r26, 0xCD	; 205
 154:	bc ec       	ldi	r27, 0xCC	; 204
 156:	0e 94 40 01 	call	0x280	; 0x280 <__umulhisi3>
 15a:	96 95       	lsr	r25
 15c:	87 95       	ror	r24
 15e:	96 95       	lsr	r25
 160:	87 95       	ror	r24
 162:	96 95       	lsr	r25
 164:	87 95       	ror	r24
 166:	9c 01       	movw	r18, r24
 168:	22 0f       	add	r18, r18
 16a:	33 1f       	adc	r19, r19
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	82 0f       	add	r24, r18
 17a:	93 1f       	adc	r25, r19
 17c:	fa 01       	movw	r30, r20
 17e:	e8 1b       	sub	r30, r24
 180:	f9 0b       	sbc	r31, r25
 182:	ff 27       	eor	r31, r31
 184:	e0 50       	subi	r30, 0x00	; 0
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	80 81       	ld	r24, Z
	
	// Hundred Decimal
	temp = (number/100 )% 10;
	PORTD = port_d_output[2];
	out_led = bin_to_7seg(temp);
	PORTC = out_led;
 18a:	88 b9       	out	0x08, r24	; 8
 18c:	8f e1       	ldi	r24, 0x1F	; 31
 18e:	9e e4       	ldi	r25, 0x4E	; 78
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <rander_value+0xfa>
 194:	00 c0       	rjmp	.+0      	; 0x196 <rander_value+0x100>
 196:	00 00       	nop
	_delay_ms(5);
	
	//Thousand Decimal
	temp = (number/1000) % 10;
	PORTD = port_d_output[3];
 198:	81 e1       	ldi	r24, 0x11	; 17
 19a:	8b b9       	out	0x0b, r24	; 11
		0x39,
		0x5E,
		0x79,
		0x71
	};
	return lookuptable[input];
 19c:	9e 01       	movw	r18, r28
 19e:	36 95       	lsr	r19
 1a0:	27 95       	ror	r18
 1a2:	36 95       	lsr	r19
 1a4:	27 95       	ror	r18
 1a6:	36 95       	lsr	r19
 1a8:	27 95       	ror	r18
 1aa:	a5 ec       	ldi	r26, 0xC5	; 197
 1ac:	b0 e2       	ldi	r27, 0x20	; 32
 1ae:	0e 94 40 01 	call	0x280	; 0x280 <__umulhisi3>
 1b2:	ac 01       	movw	r20, r24
 1b4:	52 95       	swap	r21
 1b6:	42 95       	swap	r20
 1b8:	4f 70       	andi	r20, 0x0F	; 15
 1ba:	45 27       	eor	r20, r21
 1bc:	5f 70       	andi	r21, 0x0F	; 15
 1be:	45 27       	eor	r20, r21
 1c0:	9a 01       	movw	r18, r20
 1c2:	ad ec       	ldi	r26, 0xCD	; 205
 1c4:	bc ec       	ldi	r27, 0xCC	; 204
 1c6:	0e 94 40 01 	call	0x280	; 0x280 <__umulhisi3>
 1ca:	96 95       	lsr	r25
 1cc:	87 95       	ror	r24
 1ce:	96 95       	lsr	r25
 1d0:	87 95       	ror	r24
 1d2:	96 95       	lsr	r25
 1d4:	87 95       	ror	r24
 1d6:	9c 01       	movw	r18, r24
 1d8:	22 0f       	add	r18, r18
 1da:	33 1f       	adc	r19, r19
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	82 0f       	add	r24, r18
 1ea:	93 1f       	adc	r25, r19
 1ec:	fa 01       	movw	r30, r20
 1ee:	e8 1b       	sub	r30, r24
 1f0:	f9 0b       	sbc	r31, r25
 1f2:	ff 27       	eor	r31, r31
 1f4:	e0 50       	subi	r30, 0x00	; 0
 1f6:	ff 4f       	sbci	r31, 0xFF	; 255
 1f8:	80 81       	ld	r24, Z
	
	//Thousand Decimal
	temp = (number/1000) % 10;
	PORTD = port_d_output[3];
	out_led = bin_to_7seg(temp);
	PORTC = out_led;
 1fa:	88 b9       	out	0x08, r24	; 8
 1fc:	8f e1       	ldi	r24, 0x1F	; 31
 1fe:	9e e4       	ldi	r25, 0x4E	; 78
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <rander_value+0x16a>
 204:	00 c0       	rjmp	.+0      	; 0x206 <rander_value+0x170>
 206:	00 00       	nop
	_delay_ms(5);
	
}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <check_for_add>:
unsigned int check_for_add(unsigned int number){
	unsigned char switch_input;
	switch_input = PIND;
	switch_input = switch_input & 0b00000100;
	switch_input = switch_input << 2;
	if (switch_input == 0)
 20e:	4a 99       	sbic	0x09, 2	; 9
 210:	0e c0       	rjmp	.+28     	; 0x22e <check_for_add+0x20>
 212:	ef e3       	ldi	r30, 0x3F	; 63
 214:	fc e9       	ldi	r31, 0x9C	; 156
 216:	31 97       	sbiw	r30, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <check_for_add+0x8>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <check_for_add+0xe>
 21c:	00 00       	nop
	{
		//bounce delay
		_delay_ms(10);
		if(number < 9999){
 21e:	8f 30       	cpi	r24, 0x0F	; 15
 220:	f7 e2       	ldi	r31, 0x27	; 39
 222:	9f 07       	cpc	r25, r31
 224:	10 f4       	brcc	.+4      	; 0x22a <check_for_add+0x1c>
			return number + 1;
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	08 95       	ret
		}
		else{
			return 0;
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	else{
		return number;
	}
}
 22e:	08 95       	ret

00000230 <check_for_reset>:
unsigned int check_for_reset(unsigned int data_value){
	unsigned char check_button;
	check_button = PIND;
	check_button &= 0b00000010; // Change to Switch 1
	check_button = check_button << 1;
	if(check_button == 0){
 230:	49 99       	sbic	0x09, 1	; 9
 232:	03 c0       	rjmp	.+6      	; 0x23a <check_for_reset+0xa>
		check_button = PIND;
		check_button &= 0b00000100;
		check_button = check_button << 1;
		if(check_button == 0){
 234:	4a 9b       	sbis	0x09, 2	; 9
 236:	02 c0       	rjmp	.+4      	; 0x23c <check_for_reset+0xc>
 238:	08 95       	ret
		}
		else{
			return data_value;
		}
	}
}
 23a:	08 95       	ret
	if(check_button == 0){
		check_button = PIND;
		check_button &= 0b00000100;
		check_button = check_button << 1;
		if(check_button == 0){
			return 0;
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
		}
		else{
			return data_value;
		}
	}
}
 240:	08 95       	ret

00000242 <main>:
{
	/* Replace with your application code */
	// 0 is input 1 is output
	
	//PORTC AS all Output
	DDRC = 0xFF;
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	87 b9       	out	0x07, r24	; 7
	
	//PORTD 0,4,5,6,7 is Output 1,2 as Input
	DDRD = 0b11110001;
 246:	81 ef       	ldi	r24, 0xF1	; 241
 248:	8a b9       	out	0x0a, r24	; 10
	
	unsigned int out_value = 1;
 24a:	01 e0       	ldi	r16, 0x01	; 1
 24c:	10 e0       	ldi	r17, 0x00	; 0
	if(number < 10000){
		number ++;
		return number;
	}
	else{
		return 0;
 24e:	e1 2c       	mov	r14, r1
 250:	f1 2c       	mov	r15, r1
 252:	02 c0       	rjmp	.+4      	; 0x258 <main+0x16>
 254:	0e 2d       	mov	r16, r14
 256:	1f 2d       	mov	r17, r15
	DDRC = 0xFF;
	
	//PORTD 0,4,5,6,7 is Output 1,2 as Input
	DDRD = 0b11110001;
	
	unsigned int out_value = 1;
 258:	c2 e3       	ldi	r28, 0x32	; 50
 25a:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned int count_1sec = 0;
	while (1)
	{
		rander_value(out_value);
 25c:	c8 01       	movw	r24, r16
 25e:	0e 94 4b 00 	call	0x96	; 0x96 <rander_value>
 262:	21 97       	sbiw	r28, 0x01	; 1
		count_1sec ++;
		if (count_1sec == 50)
 264:	d9 f7       	brne	.-10     	; 0x25c <main+0x1a>
		{
			count_1sec = 0;
			out_value = check_for_add(out_value);
 266:	c8 01       	movw	r24, r16
 268:	0e 94 07 01 	call	0x20e	; 0x20e <check_for_add>
			out_value = check_for_reset(out_value);
 26c:	0e 94 18 01 	call	0x230	; 0x230 <check_for_reset>
	}
}

unsigned int run_number(unsigned int number){
	// Mode Up
	if(number < 10000){
 270:	80 31       	cpi	r24, 0x10	; 16
 272:	27 e2       	ldi	r18, 0x27	; 39
 274:	92 07       	cpc	r25, r18
 276:	70 f7       	brcc	.-36     	; 0x254 <main+0x12>
		number ++;
 278:	8c 01       	movw	r16, r24
 27a:	0f 5f       	subi	r16, 0xFF	; 255
 27c:	1f 4f       	sbci	r17, 0xFF	; 255
 27e:	ec cf       	rjmp	.-40     	; 0x258 <main+0x16>

00000280 <__umulhisi3>:
 280:	a2 9f       	mul	r26, r18
 282:	b0 01       	movw	r22, r0
 284:	b3 9f       	mul	r27, r19
 286:	c0 01       	movw	r24, r0
 288:	a3 9f       	mul	r26, r19
 28a:	70 0d       	add	r23, r0
 28c:	81 1d       	adc	r24, r1
 28e:	11 24       	eor	r1, r1
 290:	91 1d       	adc	r25, r1
 292:	b2 9f       	mul	r27, r18
 294:	70 0d       	add	r23, r0
 296:	81 1d       	adc	r24, r1
 298:	11 24       	eor	r1, r1
 29a:	91 1d       	adc	r25, r1
 29c:	08 95       	ret

0000029e <_exit>:
 29e:	f8 94       	cli

000002a0 <__stop_program>:
 2a0:	ff cf       	rjmp	.-2      	; 0x2a0 <__stop_program>
