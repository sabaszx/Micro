
HW1_0706.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000132  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000090a  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000743  00000000  00000000  00000b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036d  00000000  00000000  000012b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001624  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000400  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000020a  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001c92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 75 00 	call	0xea	; 0xea <main>
  8e:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <check_for_toggle>:
char check_for_toggle(unsigned char mode_updown){
	unsigned char switch_input;
	switch_input = PIND;
	switch_input = switch_input & 0b00000010;
	switch_input = switch_input >> 1;
	if (switch_input == 0)
  96:	49 99       	sbic	0x09, 1	; 9
  98:	0e c0       	rjmp	.+28     	; 0xb6 <check_for_toggle+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	ef e3       	ldi	r30, 0x3F	; 63
  9c:	fc e9       	ldi	r31, 0x9C	; 156
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <check_for_toggle+0x8>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <check_for_toggle+0xe>
  a4:	00 00       	nop
		//bounce delay
		_delay_ms(10);
		switch_input = PIND;
		switch_input &= 0b00000010;
		switch_input = switch_input >> 1;
		if(switch_input == 0){
  a6:	49 99       	sbic	0x09, 1	; 9
  a8:	06 c0       	rjmp	.+12     	; 0xb6 <check_for_toggle+0x20>
  aa:	91 e0       	ldi	r25, 0x01	; 1
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	09 f4       	brne	.+2      	; 0xb2 <check_for_toggle+0x1c>
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	89 2f       	mov	r24, r25
  b4:	08 95       	ret
			{
				return 1;
			}
			}
	}
}
  b6:	08 95       	ret

000000b8 <check_for_reset>:
uint8_t check_for_reset(uint8_t data_value){
	unsigned char check_button;
	check_button = PIND;
	check_button &= 0b00000100;
	check_button = check_button << 1;
	if(check_button == 0){
  b8:	4a 99       	sbic	0x09, 2	; 9
  ba:	03 c0       	rjmp	.+6      	; 0xc2 <check_for_reset+0xa>
		check_button = PIND;
		check_button &= 0b00000100;
		check_button = check_button << 1;
		if(check_button == 0){
  bc:	4a 9b       	sbis	0x09, 2	; 9
  be:	02 c0       	rjmp	.+4      	; 0xc4 <check_for_reset+0xc>
  c0:	08 95       	ret
		}
		else{
			return data_value;
			}
	}
}
  c2:	08 95       	ret
	if(check_button == 0){
		check_button = PIND;
		check_button &= 0b00000100;
		check_button = check_button << 1;
		if(check_button == 0){
			return 0;
  c4:	80 e0       	ldi	r24, 0x00	; 0
		}
		else{
			return data_value;
			}
	}
}
  c6:	08 95       	ret

000000c8 <run_number>:

uint8_t run_number(uint8_t number,unsigned char mode_updown){
	// Mode Up
	if(mode_updown == 0){
  c8:	61 11       	cpse	r22, r1
  ca:	04 c0       	rjmp	.+8      	; 0xd4 <run_number+0xc>
		if(number < 16){
  cc:	80 31       	cpi	r24, 0x10	; 16
  ce:	48 f4       	brcc	.+18     	; 0xe2 <run_number+0x1a>
			number ++;
  d0:	8f 5f       	subi	r24, 0xFF	; 255
			return number;
  d2:	08 95       	ret
		}
		else{
			return 0;
		}
	}
	else if(mode_updown ==1){
  d4:	61 30       	cpi	r22, 0x01	; 1
  d6:	21 f4       	brne	.+8      	; 0xe0 <run_number+0x18>
		if(number > 0){
  d8:	88 23       	and	r24, r24
  da:	29 f0       	breq	.+10     	; 0xe6 <run_number+0x1e>
			number --;
  dc:	81 50       	subi	r24, 0x01	; 1
			return number;
  de:	08 95       	ret
		}
		else{
			return 15;
		}
	}
}
  e0:	08 95       	ret
		if(number < 16){
			number ++;
			return number;
		}
		else{
			return 0;
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	08 95       	ret
		if(number > 0){
			number --;
			return number;
		}
		else{
			return 15;
  e6:	8f e0       	ldi	r24, 0x0F	; 15
		}
	}
}
  e8:	08 95       	ret

000000ea <main>:
{
    /* Replace with your application code */
	// 0 is input 1 is output
	
	//PORTC AS all Output
	DDRC = 0xFF;
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	87 b9       	out	0x07, r24	; 7
	
	//PORTD 0 is Output 1,2 as Input
	DDRD =  0x01; //0b00000001
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	8a b9       	out	0x0a, r24	; 10
    uint8_t out_value = 0;
  f2:	80 e0       	ldi	r24, 0x00	; 0
	while (1) 
    {
		temp = 0x01;
		out_led = bin_to_7seg(out_value);
		PORTC = out_led;
		PORTD = temp;
  f4:	11 e0       	ldi	r17, 0x01	; 1
		0x39,
		0x5E,
		0x79,
		0x71
	};
	return lookuptable[input];
  f6:	e8 2f       	mov	r30, r24
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	e0 50       	subi	r30, 0x00	; 0
  fc:	ff 4f       	sbci	r31, 0xFF	; 255
  fe:	90 81       	ld	r25, Z
	unsigned char out_led,temp,mode_updown;
	while (1) 
    {
		temp = 0x01;
		out_led = bin_to_7seg(out_value);
		PORTC = out_led;
 100:	98 b9       	out	0x08, r25	; 8
		PORTD = temp;
 102:	1b b9       	out	0x0b, r17	; 11
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	33 ed       	ldi	r19, 0xD3	; 211
 108:	90 e3       	ldi	r25, 0x30	; 48
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	30 40       	sbci	r19, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x20>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x2a>
 114:	00 00       	nop
		_delay_ms(1000);
		out_value  = run_number(out_value,mode_updown);
 116:	6c 2f       	mov	r22, r28
 118:	0e 94 64 00 	call	0xc8	; 0xc8 <run_number>
 11c:	d8 2f       	mov	r29, r24
		mode_updown = check_for_toggle(mode_updown);
 11e:	8c 2f       	mov	r24, r28
 120:	0e 94 4b 00 	call	0x96	; 0x96 <check_for_toggle>
 124:	c8 2f       	mov	r28, r24
		out_value = check_for_reset(out_value);
 126:	8d 2f       	mov	r24, r29
 128:	0e 94 5c 00 	call	0xb8	; 0xb8 <check_for_reset>
 12c:	e4 cf       	rjmp	.-56     	; 0xf6 <main+0xc>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
