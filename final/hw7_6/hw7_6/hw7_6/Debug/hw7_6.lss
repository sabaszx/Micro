
hw7_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000014e  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000862  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000740  00000000  00000000  00000ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000364  00000000  00000000  0000121e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000005c  00000000  00000000  00001584  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c7  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ce  00000000  00000000  000019a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001b75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e4       	ldi	r30, 0x4E	; 78
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  8e:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <disp7seg>:
	0b00111001, 0b01011110,0b01111001, 0b01110001}; //declare as global variable
	
void disp7seg(unsigned char x)
{
	unsigned char tmp;
	tmp = tb7seg[x];
  96:	e8 2f       	mov	r30, r24
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	e0 50       	subi	r30, 0x00	; 0
  9c:	ff 4f       	sbci	r31, 0xFF	; 255
  9e:	80 81       	ld	r24, Z
	PORTC = tmp;
  a0:	88 b9       	out	0x08, r24	; 8
	tmp = tmp >> 6;
	tmp &= 0x01;
	if (tmp)
  a2:	86 ff       	sbrs	r24, 6
  a4:	02 c0       	rjmp	.+4      	; 0xaa <disp7seg+0x14>
	{
		PORTD |= 0b00000001;
  a6:	58 9a       	sbi	0x0b, 0	; 11
  a8:	08 95       	ret
	}
	else
		PORTD &= 0b11111110;
  aa:	58 98       	cbi	0x0b, 0	; 11
  ac:	08 95       	ret

000000ae <readSwitch>:
}

unsigned char readSwitch(void)
{
	unsigned char sw, ret;
	sw = PIND >> 1;
  ae:	89 b1       	in	r24, 0x09	; 9
  b0:	86 95       	lsr	r24
	sw &= 0x03;
	if (sw != 3)
  b2:	83 70       	andi	r24, 0x03	; 3
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	d1 f0       	breq	.+52     	; 0xec <readSwitch+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	8f e1       	ldi	r24, 0x1F	; 31
  ba:	9e e4       	ldi	r25, 0x4E	; 78
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <readSwitch+0xe>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <readSwitch+0x14>
  c2:	00 00       	nop
	{
		_delay_ms(10); //Debouncing
		sw = PIND >> 1;
  c4:	89 b1       	in	r24, 0x09	; 9
  c6:	86 95       	lsr	r24
		sw &= 0x03;
  c8:	83 70       	andi	r24, 0x03	; 3
		if (sw != 3)
  ca:	83 30       	cpi	r24, 0x03	; 3
  cc:	89 f0       	breq	.+34     	; 0xf0 <readSwitch+0x42>
		{
			if (sw == 1) //press sw2 for once
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	21 f0       	breq	.+8      	; 0xda <readSwitch+0x2c>
			{
				ret = DEC; //press sw2 for dec
			}
			else if(sw == 2){
  d2:	82 30       	cpi	r24, 0x02	; 2
  d4:	21 f0       	breq	.+8      	; 0xde <readSwitch+0x30>
				ret = INC; // press sw2 for inc
			}
			else
				ret = NOTHING;
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <readSwitch+0x32>
		sw &= 0x03;
		if (sw != 3)
		{
			if (sw == 1) //press sw2 for once
			{
				ret = DEC; //press sw2 for dec
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <readSwitch+0x32>
			}
			else if(sw == 2){
				ret = INC; // press sw2 for inc
  de:	80 e0       	ldi	r24, 0x00	; 0
			}
			else
				ret = NOTHING;
			do 
			{
				sw = PIND >> 1;
  e0:	99 b1       	in	r25, 0x09	; 9
  e2:	96 95       	lsr	r25
				sw &= 0x03;
			} while (sw != 3);
  e4:	93 70       	andi	r25, 0x03	; 3
  e6:	93 30       	cpi	r25, 0x03	; 3
  e8:	d9 f7       	brne	.-10     	; 0xe0 <readSwitch+0x32>
  ea:	08 95       	ret
		}
		else
			return NOTHING;
	}
	else
		return NOTHING;
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	08 95       	ret
				sw &= 0x03;
			} while (sw != 3);
			return ret;
		}
		else
			return NOTHING;
  f0:	82 e0       	ldi	r24, 0x02	; 2
	}
	else
		return NOTHING;
	return NOTHING;
}
  f2:	08 95       	ret

000000f4 <runCountUpper>:
void runCountUpper(void)
{
  f4:	cf 93       	push	r28
  f6:	c0 e0       	ldi	r28, 0x00	; 0
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	89 e6       	ldi	r24, 0x69	; 105
  fc:	98 e1       	ldi	r25, 0x18	; 24
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <runCountUpper+0xa>
 106:	00 c0       	rjmp	.+0      	; 0x108 <runCountUpper+0x14>
 108:	00 00       	nop
	unsigned count = 0;
	for (count=0;count < 15; count++)
	{
		_delay_ms(1000);
		disp7seg(count);
 10a:	8c 2f       	mov	r24, r28
 10c:	0e 94 4b 00 	call	0x96	; 0x96 <disp7seg>
 110:	cf 5f       	subi	r28, 0xFF	; 255
	return NOTHING;
}
void runCountUpper(void)
{
	unsigned count = 0;
	for (count=0;count < 15; count++)
 112:	cf 30       	cpi	r28, 0x0F	; 15
 114:	89 f7       	brne	.-30     	; 0xf8 <runCountUpper+0x4>
	{
		_delay_ms(1000);
		disp7seg(count);
	}
}
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <main>:
int main(void)
{
    unsigned char count = 0;
	unsigned char sw;
	DDRC = 0x3f;
 11a:	8f e3       	ldi	r24, 0x3F	; 63
 11c:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xf9;
 11e:	89 ef       	ldi	r24, 0xF9	; 249
 120:	8a b9       	out	0x0a, r24	; 10
	disp7seg(count);
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	0e 94 4b 00 	call	0x96	; 0x96 <disp7seg>
		disp7seg(count);
	}
}
int main(void)
{
    unsigned char count = 0;
 128:	c0 e0       	ldi	r28, 0x00	; 0
	DDRC = 0x3f;
	DDRD = 0xf9;
	disp7seg(count);
	while (1) 
    {
		sw = readSwitch();
 12a:	0e 94 57 00 	call	0xae	; 0xae <readSwitch>
		if (sw == INC)
 12e:	81 11       	cpse	r24, r1
 130:	03 c0       	rjmp	.+6      	; 0x138 <main+0x1e>
		{
			runCountUpper();
 132:	0e 94 7a 00 	call	0xf4	; 0xf4 <runCountUpper>
 136:	05 c0       	rjmp	.+10     	; 0x142 <main+0x28>
		}
		else if (sw == DEC)
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	19 f4       	brne	.+6      	; 0x142 <main+0x28>
		{
			count--;
 13c:	c1 50       	subi	r28, 0x01	; 1
			if (count <= 0)
 13e:	09 f4       	brne	.+2      	; 0x142 <main+0x28>
			{
				count = 15;
 140:	cf e0       	ldi	r28, 0x0F	; 15
			}
		}
		disp7seg(count);
 142:	8c 2f       	mov	r24, r28
 144:	0e 94 4b 00 	call	0x96	; 0x96 <disp7seg>
    }
 148:	f0 cf       	rjmp	.-32     	; 0x12a <main+0x10>

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
