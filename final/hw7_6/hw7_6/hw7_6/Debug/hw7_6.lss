
hw7_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000013a  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007cb  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ec  00000000  00000000  00000a23  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e1  00000000  00000000  0000110f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000013f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c0  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013c  00000000  00000000  000017f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  8e:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initPort>:
#include <avr/io.h>
#include <util/delay.h>

void initPort(void)
{
	DDRC = 0xff;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x01;
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	8a b9       	out	0x0a, r24	; 10
  9e:	08 95       	ret

000000a0 <main>:
}
int main(void)
{
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
  a8:	60 97       	sbiw	r28, 0x10	; 16
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	f8 94       	cli
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	cd bf       	out	0x3d, r28	; 61
	unsigned char LOOKUPTB[] = { 0x3F,
  b4:	80 e1       	ldi	r24, 0x10	; 16
  b6:	e0 e0       	ldi	r30, 0x00	; 0
  b8:	f1 e0       	ldi	r31, 0x01	; 1
  ba:	de 01       	movw	r26, r28
  bc:	11 96       	adiw	r26, 0x01	; 1
  be:	01 90       	ld	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	8a 95       	dec	r24
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x1e>
		0x71 };
	
	unsigned char sw1, sw2, result, display, status;
	result = 0;
	status = 0;
	initPort();
  c6:	0e 94 4b 00 	call	0x96	; 0x96 <initPort>
		0x79,
		0x71 };
	
	unsigned char sw1, sw2, result, display, status;
	result = 0;
	status = 0;
  ca:	20 e0       	ldi	r18, 0x00	; 0
		0x5E,
		0x79,
		0x71 };
	
	unsigned char sw1, sw2, result, display, status;
	result = 0;
  cc:	90 e0       	ldi	r25, 0x00	; 0
	status = 0;
	initPort();
	while (1)
	{
		sw1 = PIND;
  ce:	89 b1       	in	r24, 0x09	; 9
		sw1 &= 0x02;
  d0:	82 70       	andi	r24, 0x02	; 2
		sw2 = PIND;
		sw2 &= 0x04;
		
		if (sw2 == 0) {
  d2:	4a 99       	sbic	0x09, 2	; 9
  d4:	0a c0       	rjmp	.+20     	; 0xea <main+0x4a>
			status = ~status;
  d6:	20 95       	com	r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	3f ef       	ldi	r19, 0xFF	; 255
  da:	49 e6       	ldi	r20, 0x69	; 105
  dc:	58 e1       	ldi	r21, 0x18	; 24
  de:	31 50       	subi	r19, 0x01	; 1
  e0:	40 40       	sbci	r20, 0x00	; 0
  e2:	50 40       	sbci	r21, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x3e>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x48>
  e8:	00 00       	nop
			_delay_ms(1000);
		}
		if(status == 0){
  ea:	21 11       	cpse	r18, r1
  ec:	04 c0       	rjmp	.+8      	; 0xf6 <main+0x56>
			if(result == 15){
  ee:	9f 30       	cpi	r25, 0x0F	; 15
  f0:	31 f0       	breq	.+12     	; 0xfe <main+0x5e>
				result =0;
			}
			else{
				result++;
  f2:	9f 5f       	subi	r25, 0xFF	; 255
  f4:	07 c0       	rjmp	.+14     	; 0x104 <main+0x64>
			}
		}
		else{
			if(result == 0){
  f6:	99 23       	and	r25, r25
  f8:	21 f0       	breq	.+8      	; 0x102 <main+0x62>
				result=15;
			}
			else{
				result--;
  fa:	91 50       	subi	r25, 0x01	; 1
  fc:	03 c0       	rjmp	.+6      	; 0x104 <main+0x64>
			status = ~status;
			_delay_ms(1000);
		}
		if(status == 0){
			if(result == 15){
				result =0;
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	01 c0       	rjmp	.+2      	; 0x104 <main+0x64>
				result++;
			}
		}
		else{
			if(result == 0){
				result=15;
 102:	9f e0       	ldi	r25, 0x0F	; 15
			}
			else{
				result--;
			}
		}
		if (sw1 == 0){
 104:	81 11       	cpse	r24, r1
 106:	01 c0       	rjmp	.+2      	; 0x10a <main+0x6a>
			result = 0;
 108:	90 e0       	ldi	r25, 0x00	; 0
		}
		display = LOOKUPTB[result];
 10a:	e1 e0       	ldi	r30, 0x01	; 1
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	ec 0f       	add	r30, r28
 110:	fd 1f       	adc	r31, r29
 112:	e9 0f       	add	r30, r25
 114:	f1 1d       	adc	r31, r1
 116:	80 81       	ld	r24, Z
		PORTC = display;
 118:	88 b9       	out	0x08, r24	; 8
		display &=0x40;
		display = display >>6;
 11a:	86 fb       	bst	r24, 6
 11c:	88 27       	eor	r24, r24
 11e:	80 f9       	bld	r24, 0
		PORTD = display;
 120:	8b b9       	out	0x0b, r24	; 11
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	39 e6       	ldi	r19, 0x69	; 105
 126:	48 e1       	ldi	r20, 0x18	; 24
 128:	81 50       	subi	r24, 0x01	; 1
 12a:	30 40       	sbci	r19, 0x00	; 0
 12c:	40 40       	sbci	r20, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x88>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x92>
 132:	00 00       	nop
 134:	cc cf       	rjmp	.-104    	; 0xce <main+0x2e>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
