
hw6_8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a8  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bd  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ab  00000000  00000000  00001041  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000012ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c6  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ee  00000000  00000000  000016f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000017e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 56 00 	call	0xac	; 0xac <main>
  78:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <blink1sec>:
	PORTD = 0xff;
	_delay_ms(1000);
	PORTD = 0x00;
	_delay_ms(1000);
}
void blinkRun(void){
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8b b9       	out	0x0b, r24	; 11
  84:	2f e3       	ldi	r18, 0x3F	; 63
  86:	8d e0       	ldi	r24, 0x0D	; 13
  88:	93 e0       	ldi	r25, 0x03	; 3
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	80 40       	sbci	r24, 0x00	; 0
  8e:	90 40       	sbci	r25, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <blink1sec+0xa>
  92:	00 c0       	rjmp	.+0      	; 0x94 <blink1sec+0x14>
  94:	00 00       	nop
  96:	1b b8       	out	0x0b, r1	; 11
  98:	2f e3       	ldi	r18, 0x3F	; 63
  9a:	8d e0       	ldi	r24, 0x0D	; 13
  9c:	93 e0       	ldi	r25, 0x03	; 3
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <blink1sec+0x1e>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <blink1sec+0x28>
  a8:	00 00       	nop
  aa:	08 95       	ret

000000ac <main>:
}

	
int main(void)
{
	DDRD = 0xff; //port D as output
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x00; //port B(dipsw8) as input
  b0:	14 b8       	out	0x04, r1	; 4
	DDRC = 0x00; //port C(dipsw4) as input
  b2:	17 b8       	out	0x07, r1	; 7

	char inputFromPinB, inputFromPinC, results;
	    
    while (1) 
    {
		inputFromPinB = PINB; //use all of 8 inputs
  b4:	83 b1       	in	r24, 0x03	; 3
		inputFromPinC = PINC & 0x0f; //mask upper 4 bits
  b6:	66 b1       	in	r22, 0x06	; 6
		results = inputFromPinB / inputFromPinC;
  b8:	6f 70       	andi	r22, 0x0F	; 15
  ba:	0e 94 66 00 	call	0xcc	; 0xcc <__udivmodqi4>
		if(results == 0)
  be:	81 11       	cpse	r24, r1
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <main+0x1c>
		{
			blink1sec();
  c2:	0e 94 40 00 	call	0x80	; 0x80 <blink1sec>
  c6:	f6 cf       	rjmp	.-20     	; 0xb4 <main+0x8>
		}
		else if(results < 0){
			blinkRun();
		}
		else{
			PORTD = results;
  c8:	8b b9       	out	0x0b, r24	; 11
  ca:	f4 cf       	rjmp	.-24     	; 0xb4 <main+0x8>

000000cc <__udivmodqi4>:
  cc:	99 1b       	sub	r25, r25
  ce:	79 e0       	ldi	r23, 0x09	; 9
  d0:	04 c0       	rjmp	.+8      	; 0xda <__udivmodqi4_ep>

000000d2 <__udivmodqi4_loop>:
  d2:	99 1f       	adc	r25, r25
  d4:	96 17       	cp	r25, r22
  d6:	08 f0       	brcs	.+2      	; 0xda <__udivmodqi4_ep>
  d8:	96 1b       	sub	r25, r22

000000da <__udivmodqi4_ep>:
  da:	88 1f       	adc	r24, r24
  dc:	7a 95       	dec	r23
  de:	c9 f7       	brne	.-14     	; 0xd2 <__udivmodqi4_loop>
  e0:	80 95       	com	r24
  e2:	08 95       	ret

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
