
hw6_8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000146  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b5  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000705  00000000  00000000  00000af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000341  00000000  00000000  000011fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001540  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041f  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000245  00000000  00000000  000019b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  78:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <display_wave>:
	}

}

void display_result_positive(char result){
	PORTD = result;
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	8b b9       	out	0x0b, r24	; 11
  84:	98 e0       	ldi	r25, 0x08	; 8
  86:	2f e7       	ldi	r18, 0x7F	; 127
  88:	38 e3       	ldi	r19, 0x38	; 56
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	30 40       	sbci	r19, 0x00	; 0
  90:	80 40       	sbci	r24, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <display_wave+0xc>
  94:	00 c0       	rjmp	.+0      	; 0x96 <display_wave+0x16>
  96:	00 00       	nop
  98:	8b b1       	in	r24, 0x0b	; 11
  9a:	88 0f       	add	r24, r24
  9c:	8b b9       	out	0x0b, r24	; 11
  9e:	2f e7       	ldi	r18, 0x7F	; 127
  a0:	38 e3       	ldi	r19, 0x38	; 56
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	30 40       	sbci	r19, 0x00	; 0
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <display_wave+0x24>
  ac:	00 c0       	rjmp	.+0      	; 0xae <display_wave+0x2e>
  ae:	00 00       	nop
  b0:	91 50       	subi	r25, 0x01	; 1
  b2:	49 f7       	brne	.-46     	; 0x86 <display_wave+0x6>
  b4:	08 95       	ret

000000b6 <display_result_nagative>:
}

void display_result_nagative(char result){
	//result = result + 1;
	PORTD = result;
  b6:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	2f ef       	ldi	r18, 0xFF	; 255
  ba:	84 e3       	ldi	r24, 0x34	; 52
  bc:	9c e0       	ldi	r25, 0x0C	; 12
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	80 40       	sbci	r24, 0x00	; 0
  c2:	90 40       	sbci	r25, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <display_result_nagative+0x8>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <display_result_nagative+0x12>
  c8:	00 00       	nop
	_delay_ms(500);
	PORTD = 0x00;
  ca:	1b b8       	out	0x0b, r1	; 11
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	84 e3       	ldi	r24, 0x34	; 52
  d0:	9c e0       	ldi	r25, 0x0C	; 12
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <display_result_nagative+0x1c>
  da:	00 c0       	rjmp	.+0      	; 0xdc <display_result_nagative+0x26>
  dc:	00 00       	nop
  de:	08 95       	ret

000000e0 <main>:
}


int main(){

	DDRD = 0xFF;  // Defind PORTD to be output
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x00;  // Defind PORTB to be input
  e4:	14 b8       	out	0x04, r1	; 4
	DDRC = 0x00;  // Defind PORTC to be input
  e6:	17 b8       	out	0x07, r1	; 7
	unsigned char isInputFromPinBNagative;
	unsigned char isInputFromPinCNagative;
	unsigned char result;

	while(1){
		inputFromPinB = PINB; //0xFF
  e8:	83 b1       	in	r24, 0x03	; 3
		inputFromPinC = PINC;
  ea:	66 b1       	in	r22, 0x06	; 6

		isInputFromPinBNagative = (inputFromPinB & 0b10000000);
  ec:	38 2f       	mov	r19, r24
  ee:	30 78       	andi	r19, 0x80	; 128
		isInputFromPinCNagative = (inputFromPinC & 0b00001000);
  f0:	26 2f       	mov	r18, r22
  f2:	28 70       	andi	r18, 0x08	; 8

		if(isInputFromPinBNagative){
  f4:	31 11       	cpse	r19, r1
			inputFromPinB = ~inputFromPinB +1;
  f6:	81 95       	neg	r24
		}

		if(isInputFromPinCNagative){
  f8:	22 23       	and	r18, r18
  fa:	19 f0       	breq	.+6      	; 0x102 <main+0x22>
			inputFromPinC |= 0xF0;
  fc:	60 6f       	ori	r22, 0xF0	; 240
			inputFromPinC = ~inputFromPinC +1;
  fe:	61 95       	neg	r22
 100:	01 c0       	rjmp	.+2      	; 0x104 <main+0x24>
			}else{
			inputFromPinC &= 0x0F;
 102:	6f 70       	andi	r22, 0x0F	; 15
		}

		if(inputFromPinC == 0){
 104:	61 11       	cpse	r22, r1
 106:	03 c0       	rjmp	.+6      	; 0x10e <main+0x2e>
			display_wave();
 108:	0e 94 40 00 	call	0x80	; 0x80 <display_wave>
 10c:	ed cf       	rjmp	.-38     	; 0xe8 <main+0x8>
			}else{
			result = inputFromPinB/inputFromPinC;
 10e:	0e 94 95 00 	call	0x12a	; 0x12a <__udivmodqi4>
			if((isInputFromPinBNagative && !isInputFromPinCNagative) || (!isInputFromPinBNagative && isInputFromPinCNagative)){
 112:	33 23       	and	r19, r19
 114:	19 f0       	breq	.+6      	; 0x11c <main+0x3c>
 116:	22 23       	and	r18, r18
 118:	19 f0       	breq	.+6      	; 0x120 <main+0x40>
 11a:	05 c0       	rjmp	.+10     	; 0x126 <main+0x46>
 11c:	22 23       	and	r18, r18
 11e:	19 f0       	breq	.+6      	; 0x126 <main+0x46>
				display_result_nagative(result);
 120:	0e 94 5b 00 	call	0xb6	; 0xb6 <display_result_nagative>
 124:	e1 cf       	rjmp	.-62     	; 0xe8 <main+0x8>
	}

}

void display_result_positive(char result){
	PORTD = result;
 126:	8b b9       	out	0x0b, r24	; 11
 128:	df cf       	rjmp	.-66     	; 0xe8 <main+0x8>

0000012a <__udivmodqi4>:
 12a:	99 1b       	sub	r25, r25
 12c:	79 e0       	ldi	r23, 0x09	; 9
 12e:	04 c0       	rjmp	.+8      	; 0x138 <__udivmodqi4_ep>

00000130 <__udivmodqi4_loop>:
 130:	99 1f       	adc	r25, r25
 132:	96 17       	cp	r25, r22
 134:	08 f0       	brcs	.+2      	; 0x138 <__udivmodqi4_ep>
 136:	96 1b       	sub	r25, r22

00000138 <__udivmodqi4_ep>:
 138:	88 1f       	adc	r24, r24
 13a:	7a 95       	dec	r23
 13c:	c9 f7       	brne	.-14     	; 0x130 <__udivmodqi4_loop>
 13e:	80 95       	com	r24
 140:	08 95       	ret

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
