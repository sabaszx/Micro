
hw6_8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000737  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000678  00000000  00000000  000008e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026d  00000000  00000000  00000f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b3  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000060  00000000  00000000  000015a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001603  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRD = 0xff; //port D as output
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x00; //port B(dipsw8) as input
  84:	14 b8       	out	0x04, r1	; 4
	DDRC = 0x00; //port C(dipsw4) as input
  86:	17 b8       	out	0x07, r1	; 7
		inputFromPinC = PINC & 0x0f; //mask upper 4 bits
		results = inputFromPinB / inputFromPinC;
		if(results == 0)
		{
			//blink every 1 secs if results = 0
			PORTD = 0xff;
  88:	2f ef       	ldi	r18, 0xFF	; 255

	char inputFromPinB, inputFromPinC, results;
	    
    while (1) 
    {
		inputFromPinB = PINB; //use all of 8 inputs
  8a:	83 b1       	in	r24, 0x03	; 3
		inputFromPinC = PINC & 0x0f; //mask upper 4 bits
  8c:	66 b1       	in	r22, 0x06	; 6
		results = inputFromPinB / inputFromPinC;
		if(results == 0)
  8e:	6f 70       	andi	r22, 0x0F	; 15
  90:	0e 94 57 00 	call	0xae	; 0xae <__udivmodqi4>
  94:	81 11       	cpse	r24, r1
  96:	f9 cf       	rjmp	.-14     	; 0x8a <main+0xa>
		{
			//blink every 1 secs if results = 0
			PORTD = 0xff;
  98:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	3f e3       	ldi	r19, 0x3F	; 63
  9c:	8d e0       	ldi	r24, 0x0D	; 13
  9e:	93 e0       	ldi	r25, 0x03	; 3
  a0:	31 50       	subi	r19, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x20>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x2a>
  aa:	00 00       	nop
  ac:	ee cf       	rjmp	.-36     	; 0x8a <main+0xa>

000000ae <__udivmodqi4>:
  ae:	99 1b       	sub	r25, r25
  b0:	79 e0       	ldi	r23, 0x09	; 9
  b2:	04 c0       	rjmp	.+8      	; 0xbc <__udivmodqi4_ep>

000000b4 <__udivmodqi4_loop>:
  b4:	99 1f       	adc	r25, r25
  b6:	96 17       	cp	r25, r22
  b8:	08 f0       	brcs	.+2      	; 0xbc <__udivmodqi4_ep>
  ba:	96 1b       	sub	r25, r22

000000bc <__udivmodqi4_ep>:
  bc:	88 1f       	adc	r24, r24
  be:	7a 95       	dec	r23
  c0:	c9 f7       	brne	.-14     	; 0xb4 <__udivmodqi4_loop>
  c2:	80 95       	com	r24
  c4:	08 95       	ret

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
