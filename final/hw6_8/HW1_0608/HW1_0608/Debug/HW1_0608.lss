
HW1_0608.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000154  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000086a  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000707  00000000  00000000  00000aba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000314  00000000  00000000  000011c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000014d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ca  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001bf  00000000  00000000  000018f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001ab5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 65 00 	call	0xca	; 0xca <main>
  78:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <display_led_running>:
			}
		}
    }
}

void display_led_running(){
  80:	98 e0       	ldi	r25, 0x08	; 8
	unsigned char run = 0x01;
  82:	81 e0       	ldi	r24, 0x01	; 1
	uint8_t counting;
	for(counting = 0; counting<8;counting++){
		PORTD = run;
  84:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	2f e7       	ldi	r18, 0x7F	; 127
  88:	39 ea       	ldi	r19, 0xA9	; 169
  8a:	43 e0       	ldi	r20, 0x03	; 3
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	30 40       	sbci	r19, 0x00	; 0
  90:	40 40       	sbci	r20, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <display_led_running+0xc>
  94:	00 c0       	rjmp	.+0      	; 0x96 <display_led_running+0x16>
  96:	00 00       	nop
		_delay_ms(1000);
		run = run << 1;
  98:	88 0f       	add	r24, r24
  9a:	91 50       	subi	r25, 0x01	; 1
}

void display_led_running(){
	unsigned char run = 0x01;
	uint8_t counting;
	for(counting = 0; counting<8;counting++){
  9c:	99 f7       	brne	.-26     	; 0x84 <display_led_running+0x4>
		PORTD = run;
		_delay_ms(1000);
		run = run << 1;
	}	
}
  9e:	08 95       	ret

000000a0 <display_negative_value>:

void display_negative_value(int8_t data){
	PORTD = data;
  a0:	8b b9       	out	0x0b, r24	; 11
  a2:	2f e7       	ldi	r18, 0x7F	; 127
  a4:	89 ea       	ldi	r24, 0xA9	; 169
  a6:	93 e0       	ldi	r25, 0x03	; 3
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <display_negative_value+0x8>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <display_negative_value+0x12>
  b2:	00 00       	nop
	_delay_ms(1000);
	PORTD = 0x00;
  b4:	1b b8       	out	0x0b, r1	; 11
  b6:	2f e7       	ldi	r18, 0x7F	; 127
  b8:	89 ea       	ldi	r24, 0xA9	; 169
  ba:	93 e0       	ldi	r25, 0x03	; 3
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <display_negative_value+0x1c>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <display_negative_value+0x26>
  c6:	00 00       	nop
  c8:	08 95       	ret

000000ca <main>:
	/*Setting Port Direction
	 0x00 as Input 0xFF as output 
	 Port D as Output another as Output
	 */
	
	DDRD= 0xFF; 
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	8a b9       	out	0x0a, r24	; 10
    DDRC = 0x00;
  ce:	17 b8       	out	0x07, r1	; 7
	DDRB = 0x00; // Will mask later
  d0:	14 b8       	out	0x04, r1	; 4
	 
    while (1) 
    {
		
		data = PINB; // Receive Number from PINB 
  d2:	83 b1       	in	r24, 0x03	; 3
		devider = PINC; // Receive Divider from PINC
  d4:	66 b1       	in	r22, 0x06	; 6
		
		devider = devider & 0b00001111;// Mask get only PC0123 0b00001111
  d6:	6f 70       	andi	r22, 0x0F	; 15
		if(devider == 0){
  d8:	19 f4       	brne	.+6      	; 0xe0 <main+0x16>
			display_led_running();
  da:	0e 94 40 00 	call	0x80	; 0x80 <display_led_running>
  de:	f9 cf       	rjmp	.-14     	; 0xd2 <main+0x8>
		}
		else{
			result = data / devider;
  e0:	08 2e       	mov	r0, r24
  e2:	00 0c       	add	r0, r0
  e4:	99 0b       	sbc	r25, r25
  e6:	06 2e       	mov	r0, r22
  e8:	00 0c       	add	r0, r0
  ea:	77 0b       	sbc	r23, r23
  ec:	0e 94 80 00 	call	0x100	; 0x100 <__divmodhi4>
			if(result >= 0){
  f0:	66 23       	and	r22, r22
  f2:	24 f0       	brlt	.+8      	; 0xfc <main+0x32>
				display_negative_value(result);
  f4:	86 2f       	mov	r24, r22
  f6:	0e 94 50 00 	call	0xa0	; 0xa0 <display_negative_value>
  fa:	eb cf       	rjmp	.-42     	; 0xd2 <main+0x8>
	PORTD = 0x00;
	_delay_ms(1000);
}

void display_positive_value(int8_t data){
	PORTD = data;
  fc:	6b b9       	out	0x0b, r22	; 11
  fe:	e9 cf       	rjmp	.-46     	; 0xd2 <main+0x8>

00000100 <__divmodhi4>:
 100:	97 fb       	bst	r25, 7
 102:	07 2e       	mov	r0, r23
 104:	16 f4       	brtc	.+4      	; 0x10a <__divmodhi4+0xa>
 106:	00 94       	com	r0
 108:	07 d0       	rcall	.+14     	; 0x118 <__divmodhi4_neg1>
 10a:	77 fd       	sbrc	r23, 7
 10c:	09 d0       	rcall	.+18     	; 0x120 <__divmodhi4_neg2>
 10e:	0e 94 94 00 	call	0x128	; 0x128 <__udivmodhi4>
 112:	07 fc       	sbrc	r0, 7
 114:	05 d0       	rcall	.+10     	; 0x120 <__divmodhi4_neg2>
 116:	3e f4       	brtc	.+14     	; 0x126 <__divmodhi4_exit>

00000118 <__divmodhi4_neg1>:
 118:	90 95       	com	r25
 11a:	81 95       	neg	r24
 11c:	9f 4f       	sbci	r25, 0xFF	; 255
 11e:	08 95       	ret

00000120 <__divmodhi4_neg2>:
 120:	70 95       	com	r23
 122:	61 95       	neg	r22
 124:	7f 4f       	sbci	r23, 0xFF	; 255

00000126 <__divmodhi4_exit>:
 126:	08 95       	ret

00000128 <__udivmodhi4>:
 128:	aa 1b       	sub	r26, r26
 12a:	bb 1b       	sub	r27, r27
 12c:	51 e1       	ldi	r21, 0x11	; 17
 12e:	07 c0       	rjmp	.+14     	; 0x13e <__udivmodhi4_ep>

00000130 <__udivmodhi4_loop>:
 130:	aa 1f       	adc	r26, r26
 132:	bb 1f       	adc	r27, r27
 134:	a6 17       	cp	r26, r22
 136:	b7 07       	cpc	r27, r23
 138:	10 f0       	brcs	.+4      	; 0x13e <__udivmodhi4_ep>
 13a:	a6 1b       	sub	r26, r22
 13c:	b7 0b       	sbc	r27, r23

0000013e <__udivmodhi4_ep>:
 13e:	88 1f       	adc	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	5a 95       	dec	r21
 144:	a9 f7       	brne	.-22     	; 0x130 <__udivmodhi4_loop>
 146:	80 95       	com	r24
 148:	90 95       	com	r25
 14a:	bc 01       	movw	r22, r24
 14c:	cd 01       	movw	r24, r26
 14e:	08 95       	ret

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
