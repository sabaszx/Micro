
hw8_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000034e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000034e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a17  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f1  00000000  00000000  00000e33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c5  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  000019ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e0  00000000  00000000  00001af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c0  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002290  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <main>
  88:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <redOn>:

signed char pressedKey;
signed char row;
// Switch Control, Switch using Active Low
void redOn(){
	PORTD &= 0b11011111; //PD5 Low
  90:	5d 98       	cbi	0x0b, 5	; 11
  92:	08 95       	ret

00000094 <greenOn>:
}

void greenOn(){
	PORTD &= 0b11101111;//PD4 Low
  94:	5c 98       	cbi	0x0b, 4	; 11
  96:	08 95       	ret

00000098 <redOff>:
}

void redOff(){
	PORTD |= 0b00100000; //Only PD5 Must High
  98:	5d 9a       	sbi	0x0b, 5	; 11
  9a:	08 95       	ret

0000009c <greenOff>:
}

void greenOff(){
	PORTD |= 0b00010000; //Only PD4 Must Low
  9c:	5c 9a       	sbi	0x0b, 4	; 11
  9e:	08 95       	ret

000000a0 <blinkRed>:
}

// Blink Setting
void blinkRed(){
	redOn();
  a0:	0e 94 48 00 	call	0x90	; 0x90 <redOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	89 e6       	ldi	r24, 0x69	; 105
  a8:	98 e1       	ldi	r25, 0x18	; 24
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <blinkRed+0xa>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <blinkRed+0x14>
  b4:	00 00       	nop
	_delay_ms(500);
	redOff();
  b6:	0e 94 4c 00 	call	0x98	; 0x98 <redOff>
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	89 e6       	ldi	r24, 0x69	; 105
  be:	98 e1       	ldi	r25, 0x18	; 24
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <blinkRed+0x20>
  c8:	00 c0       	rjmp	.+0      	; 0xca <blinkRed+0x2a>
  ca:	00 00       	nop
  cc:	08 95       	ret

000000ce <blinkGreen>:
	_delay_ms(500);
}

void blinkGreen(){
	greenOn();
  ce:	0e 94 4a 00 	call	0x94	; 0x94 <greenOn>
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	89 e6       	ldi	r24, 0x69	; 105
  d6:	98 e1       	ldi	r25, 0x18	; 24
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <blinkGreen+0xa>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <blinkGreen+0x14>
  e2:	00 00       	nop
	_delay_ms(500);
	greenOff();
  e4:	0e 94 4e 00 	call	0x9c	; 0x9c <greenOff>
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	89 e6       	ldi	r24, 0x69	; 105
  ec:	98 e1       	ldi	r25, 0x18	; 24
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <blinkGreen+0x20>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <blinkGreen+0x2a>
  f8:	00 00       	nop
  fa:	08 95       	ret

000000fc <initPort>:
	_delay_ms(500);
}
void initPort(){
	DDRB = 0b00001111; // 0x0F
  fc:	8f e0       	ldi	r24, 0x0F	; 15
  fe:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b11110111; //0xFF but INT1 is located on PD3, it must be input
 100:	87 ef       	ldi	r24, 0xF7	; 247
 102:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0b11111000; //PORT C will be input
 104:	88 ef       	ldi	r24, 0xF8	; 248
 106:	87 b9       	out	0x07, r24	; 7
 108:	08 95       	ret

0000010a <__vector_2>:
}
//Interrupt Service Routine of INT1
ISR(INT1_vect){
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	ff 92       	push	r15
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	2f 93       	push	r18
 11c:	3f 93       	push	r19
 11e:	4f 93       	push	r20
 120:	5f 93       	push	r21
 122:	6f 93       	push	r22
 124:	7f 93       	push	r23
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	af 93       	push	r26
 12c:	bf 93       	push	r27
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ef 93       	push	r30
 134:	ff 93       	push	r31
	
	// Initial pressedKey with -1 represent to key pressed
	pressedKey = -1;
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	// Initial row to 1 represent start search with row 1
	row = 1;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <row>
			}
		}
		
		else if(row ==4){
			// Check For Row 0, PB 0 Must be 0
			PORTB = 0b11111110;
 142:	4e ef       	ldi	r20, 0xFE	; 254
				case 0b011:
				pressedKey = 11; break;
				case 0b101:
				pressedKey = 0; break;
				case 0b110:
				pressedKey = 10; break;
 144:	0a e0       	ldi	r16, 0x0A	; 10
			_delay_ms(10); // bounce check
			
			// Read Value from PINC
			switch(PINC & 0x07){
				case 0b011:
				pressedKey = 11; break;
 146:	1b e0       	ldi	r17, 0x0B	; 11
			}
		}
		
		else if(row ==3){
			// Check For Row 3, PB 1 Must be 0
			PORTB = 0b11111101;
 148:	3d ef       	ldi	r19, 0xFD	; 253
			// Read Value from PINC
			switch(PINC & 0x07){
				case 0b011:
				pressedKey = 9; break;
				case 0b101:
				pressedKey = 8; break;
 14a:	d8 e0       	ldi	r29, 0x08	; 8
				case 0b110:
				pressedKey = 7; break;
 14c:	c7 e0       	ldi	r28, 0x07	; 7
			_delay_ms(10); // bounce check
			
			// Read Value from PINC
			switch(PINC & 0x07){
				case 0b011:
				pressedKey = 9; break;
 14e:	b9 e0       	ldi	r27, 0x09	; 9
			}
		}
		
		else if(row ==2){
			// Check For Row 2, PB 2 Must be 0
			PORTB = 0b11111011;
 150:	2b ef       	ldi	r18, 0xFB	; 251
			// Read Value from PINC
			switch(PINC & 0x07){
				case 0b011:
				pressedKey = 6; break;
				case 0b101:
				pressedKey = 5; break;
 152:	a5 e0       	ldi	r26, 0x05	; 5
				case 0b110:
				pressedKey = 4; break;
 154:	f4 e0       	ldi	r31, 0x04	; 4
			_delay_ms(10); // bounce check
			
			// Read Value from PINC
			switch(PINC & 0x07){
				case 0b011:
				pressedKey = 6; break;
 156:	e6 e0       	ldi	r30, 0x06	; 6
	{
		//using port B output logic to find and Port C input logic to check
		if (row == 1)
		{
			// Check For Row 1,PB3 must be 0 (We have 1,2,3 in row 1)
			PORTB = 0b11110111;
 158:	0f 2e       	mov	r0, r31
 15a:	f7 ef       	ldi	r31, 0xF7	; 247
 15c:	ff 2e       	mov	r15, r31
 15e:	f0 2d       	mov	r31, r0
			// Read Value from PINC
			switch(PINC & 0x07){
				case 0b011:
				pressedKey = 3; break;
				case 0b101:
				pressedKey = 2; break;
 160:	72 e0       	ldi	r23, 0x02	; 2
				case 0b110:
				pressedKey = 1; break;
 162:	61 e0       	ldi	r22, 0x01	; 1
			_delay_ms(10); //bounce check
			
			// Read Value from PINC
			switch(PINC & 0x07){
				case 0b011:
				pressedKey = 3; break;
 164:	53 e0       	ldi	r21, 0x03	; 3
	row = 1;
	
	do
	{
		//using port B output logic to find and Port C input logic to check
		if (row == 1)
 166:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <row>
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	c9 f4       	brne	.+50     	; 0x1a0 <__vector_2+0x96>
		{
			// Check For Row 1,PB3 must be 0 (We have 1,2,3 in row 1)
			PORTB = 0b11110111;
 16e:	f5 b8       	out	0x05, r15	; 5
 170:	8f e3       	ldi	r24, 0x3F	; 63
 172:	9c e9       	ldi	r25, 0x9C	; 156
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <__vector_2+0x6a>
 178:	00 c0       	rjmp	.+0      	; 0x17a <__vector_2+0x70>
 17a:	00 00       	nop
			_delay_ms(10); //bounce check
			
			// Read Value from PINC
			switch(PINC & 0x07){
 17c:	86 b1       	in	r24, 0x06	; 6
 17e:	87 70       	andi	r24, 0x07	; 7
 180:	85 30       	cpi	r24, 0x05	; 5
 182:	41 f0       	breq	.+16     	; 0x194 <__vector_2+0x8a>
 184:	86 30       	cpi	r24, 0x06	; 6
 186:	49 f0       	breq	.+18     	; 0x19a <__vector_2+0x90>
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	09 f0       	breq	.+2      	; 0x18e <__vector_2+0x84>
 18c:	56 c0       	rjmp	.+172    	; 0x23a <__vector_2+0x130>
				case 0b011:
				pressedKey = 3; break;
 18e:	50 93 00 01 	sts	0x0100, r21	; 0x800100 <_edata>
 192:	53 c0       	rjmp	.+166    	; 0x23a <__vector_2+0x130>
				case 0b101:
				pressedKey = 2; break;
 194:	70 93 00 01 	sts	0x0100, r23	; 0x800100 <_edata>
 198:	50 c0       	rjmp	.+160    	; 0x23a <__vector_2+0x130>
				case 0b110:
				pressedKey = 1; break;
 19a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 19e:	4d c0       	rjmp	.+154    	; 0x23a <__vector_2+0x130>
			}
		}
		
		else if(row ==2){
 1a0:	82 30       	cpi	r24, 0x02	; 2
 1a2:	c1 f4       	brne	.+48     	; 0x1d4 <__vector_2+0xca>
			// Check For Row 2, PB 2 Must be 0
			PORTB = 0b11111011;
 1a4:	25 b9       	out	0x05, r18	; 5
 1a6:	8f e3       	ldi	r24, 0x3F	; 63
 1a8:	9c e9       	ldi	r25, 0x9C	; 156
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <__vector_2+0xa0>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <__vector_2+0xa6>
 1b0:	00 00       	nop
			_delay_ms(10); // bounce check
			
			// Read Value from PINC
			switch(PINC & 0x07){
 1b2:	86 b1       	in	r24, 0x06	; 6
 1b4:	87 70       	andi	r24, 0x07	; 7
 1b6:	85 30       	cpi	r24, 0x05	; 5
 1b8:	39 f0       	breq	.+14     	; 0x1c8 <__vector_2+0xbe>
 1ba:	86 30       	cpi	r24, 0x06	; 6
 1bc:	41 f0       	breq	.+16     	; 0x1ce <__vector_2+0xc4>
 1be:	83 30       	cpi	r24, 0x03	; 3
 1c0:	e1 f5       	brne	.+120    	; 0x23a <__vector_2+0x130>
				case 0b011:
				pressedKey = 6; break;
 1c2:	e0 93 00 01 	sts	0x0100, r30	; 0x800100 <_edata>
 1c6:	39 c0       	rjmp	.+114    	; 0x23a <__vector_2+0x130>
				case 0b101:
				pressedKey = 5; break;
 1c8:	a0 93 00 01 	sts	0x0100, r26	; 0x800100 <_edata>
 1cc:	36 c0       	rjmp	.+108    	; 0x23a <__vector_2+0x130>
				case 0b110:
				pressedKey = 4; break;
 1ce:	f0 93 00 01 	sts	0x0100, r31	; 0x800100 <_edata>
 1d2:	33 c0       	rjmp	.+102    	; 0x23a <__vector_2+0x130>
			}
		}
		
		else if(row ==3){
 1d4:	83 30       	cpi	r24, 0x03	; 3
 1d6:	c1 f4       	brne	.+48     	; 0x208 <__vector_2+0xfe>
			// Check For Row 3, PB 1 Must be 0
			PORTB = 0b11111101;
 1d8:	35 b9       	out	0x05, r19	; 5
 1da:	8f e3       	ldi	r24, 0x3F	; 63
 1dc:	9c e9       	ldi	r25, 0x9C	; 156
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <__vector_2+0xd4>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <__vector_2+0xda>
 1e4:	00 00       	nop
			_delay_ms(10); // bounce check
			
			// Read Value from PINC
			switch(PINC & 0x07){
 1e6:	86 b1       	in	r24, 0x06	; 6
 1e8:	87 70       	andi	r24, 0x07	; 7
 1ea:	85 30       	cpi	r24, 0x05	; 5
 1ec:	39 f0       	breq	.+14     	; 0x1fc <__vector_2+0xf2>
 1ee:	86 30       	cpi	r24, 0x06	; 6
 1f0:	41 f0       	breq	.+16     	; 0x202 <__vector_2+0xf8>
 1f2:	83 30       	cpi	r24, 0x03	; 3
 1f4:	11 f5       	brne	.+68     	; 0x23a <__vector_2+0x130>
				case 0b011:
				pressedKey = 9; break;
 1f6:	b0 93 00 01 	sts	0x0100, r27	; 0x800100 <_edata>
 1fa:	1f c0       	rjmp	.+62     	; 0x23a <__vector_2+0x130>
				case 0b101:
				pressedKey = 8; break;
 1fc:	d0 93 00 01 	sts	0x0100, r29	; 0x800100 <_edata>
 200:	1c c0       	rjmp	.+56     	; 0x23a <__vector_2+0x130>
				case 0b110:
				pressedKey = 7; break;
 202:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <_edata>
 206:	19 c0       	rjmp	.+50     	; 0x23a <__vector_2+0x130>
			}
		}
		
		else if(row ==4){
 208:	84 30       	cpi	r24, 0x04	; 4
 20a:	b9 f4       	brne	.+46     	; 0x23a <__vector_2+0x130>
			// Check For Row 0, PB 0 Must be 0
			PORTB = 0b11111110;
 20c:	45 b9       	out	0x05, r20	; 5
 20e:	8f e3       	ldi	r24, 0x3F	; 63
 210:	9c e9       	ldi	r25, 0x9C	; 156
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <__vector_2+0x108>
 216:	00 c0       	rjmp	.+0      	; 0x218 <__vector_2+0x10e>
 218:	00 00       	nop
			_delay_ms(10); // bounce check
			
			// Read Value from PINC
			switch(PINC & 0x07){
 21a:	86 b1       	in	r24, 0x06	; 6
 21c:	87 70       	andi	r24, 0x07	; 7
 21e:	85 30       	cpi	r24, 0x05	; 5
 220:	39 f0       	breq	.+14     	; 0x230 <__vector_2+0x126>
 222:	86 30       	cpi	r24, 0x06	; 6
 224:	41 f0       	breq	.+16     	; 0x236 <__vector_2+0x12c>
 226:	83 30       	cpi	r24, 0x03	; 3
 228:	41 f4       	brne	.+16     	; 0x23a <__vector_2+0x130>
				case 0b011:
				pressedKey = 11; break;
 22a:	10 93 00 01 	sts	0x0100, r17	; 0x800100 <_edata>
 22e:	05 c0       	rjmp	.+10     	; 0x23a <__vector_2+0x130>
				case 0b101:
				pressedKey = 0; break;
 230:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 234:	02 c0       	rjmp	.+4      	; 0x23a <__vector_2+0x130>
				case 0b110:
				pressedKey = 10; break;
 236:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <_edata>
			}
		}
		
		row ++;
 23a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <row>
 23e:	8f 5f       	subi	r24, 0xFF	; 255
 240:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <row>
	} while (row <= 4);
 244:	85 30       	cpi	r24, 0x05	; 5
 246:	0c f4       	brge	.+2      	; 0x24a <__vector_2+0x140>
 248:	8e cf       	rjmp	.-228    	; 0x166 <__vector_2+0x5c>
	
	if (pressedKey == 0)
 24a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 24e:	81 11       	cpse	r24, r1
 250:	0b c0       	rjmp	.+22     	; 0x268 <__vector_2+0x15e>
	{
		for (int i=0;i<5;i++) // blink for 5 times
		{
			blinkRed();
 252:	0e 94 50 00 	call	0xa0	; 0xa0 <blinkRed>
 256:	0e 94 50 00 	call	0xa0	; 0xa0 <blinkRed>
 25a:	0e 94 50 00 	call	0xa0	; 0xa0 <blinkRed>
 25e:	0e 94 50 00 	call	0xa0	; 0xa0 <blinkRed>
 262:	0e 94 50 00 	call	0xa0	; 0xa0 <blinkRed>
 266:	0f c0       	rjmp	.+30     	; 0x286 <__vector_2+0x17c>
		}
	}
	else if (pressedKey != -1) // other button but not no click
	{
		for(int i=0;i<pressedKey;i++){
 268:	18 16       	cp	r1, r24
 26a:	6c f4       	brge	.+26     	; 0x286 <__vector_2+0x17c>
 26c:	c0 e0       	ldi	r28, 0x00	; 0
 26e:	d0 e0       	ldi	r29, 0x00	; 0
			blinkGreen();
 270:	0e 94 67 00 	call	0xce	; 0xce <blinkGreen>
			blinkRed();
		}
	}
	else if (pressedKey != -1) // other button but not no click
	{
		for(int i=0;i<pressedKey;i++){
 274:	21 96       	adiw	r28, 0x01	; 1
 276:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 27a:	08 2e       	mov	r0, r24
 27c:	00 0c       	add	r0, r0
 27e:	99 0b       	sbc	r25, r25
 280:	c8 17       	cp	r28, r24
 282:	d9 07       	cpc	r29, r25
 284:	ac f3       	brlt	.-22     	; 0x270 <__vector_2+0x166>
			blinkGreen();
		}
	}
	PORTB = 0b0000; // for receive next interrupt
 286:	15 b8       	out	0x05, r1	; 5
}
 288:	ff 91       	pop	r31
 28a:	ef 91       	pop	r30
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	bf 91       	pop	r27
 292:	af 91       	pop	r26
 294:	9f 91       	pop	r25
 296:	8f 91       	pop	r24
 298:	7f 91       	pop	r23
 29a:	6f 91       	pop	r22
 29c:	5f 91       	pop	r21
 29e:	4f 91       	pop	r20
 2a0:	3f 91       	pop	r19
 2a2:	2f 91       	pop	r18
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	ff 90       	pop	r15
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <main>:
int main(void)
{
	// Port and Pin Direction Setting
	//PORT D and PORT B will be output
	initPort();
 2b4:	0e 94 7e 00 	call	0xfc	; 0xfc <initPort>
	
	//Interrupt Flag Setting EIMSK,EICRA
	// bit 1 must be 1 (active)
	EIMSK = 0x02;
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	8d bb       	out	0x1d, r24	; 29
	
	//falling edge and logic low interrupt
	EICRA = 0b0100;
 2bc:	84 e0       	ldi	r24, 0x04	; 4
 2be:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	
	//Interrupt Setting
	sei();
 2c2:	78 94       	sei
	
	// Initial Setting
	// Input will hold all port high because we want interrupt on low
	PORTC = 0x07; //0b111
 2c4:	87 e0       	ldi	r24, 0x07	; 7
 2c6:	88 b9       	out	0x08, r24	; 8
	
	// Output reset with all low because we want low to toggle interrupt
	PORTB = 0x00;
 2c8:	15 b8       	out	0x05, r1	; 5
	
	// Hold high logic in Interrupt port INT0
	PORTD |= (1<<3);
 2ca:	5b 9a       	sbi	0x0b, 3	; 11
	greenOff();
 2cc:	0e 94 4e 00 	call	0x9c	; 0x9c <greenOff>
	redOff();
 2d0:	0e 94 4c 00 	call	0x98	; 0x98 <redOff>
 2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <main+0x20>

000002d6 <_exit>:
 2d6:	f8 94       	cli

000002d8 <__stop_program>:
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <__stop_program>
